/* 
 * Contratti API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnagraficheApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Recupera le classi previdenziali disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>TipiCassePrevidenzialiResponse</returns>
        TipiCassePrevidenzialiResponse GetCassePrevidenziali (string xAuthorization);

        /// <summary>
        /// Recupera le classi previdenziali disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of TipiCassePrevidenzialiResponse</returns>
        ApiResponse<TipiCassePrevidenzialiResponse> GetCassePrevidenzialiWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera le causali di pagamento disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>TipiCausaliPagamentoResponse</returns>
        TipiCausaliPagamentoResponse GetCausaliPagamento (string xAuthorization);

        /// <summary>
        /// Recupera le causali di pagamento disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of TipiCausaliPagamentoResponse</returns>
        ApiResponse<TipiCausaliPagamentoResponse> GetCausaliPagamentoWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera le classi documentali disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ClassiDocumentaliResponse</returns>
        ClassiDocumentaliResponse GetClassiDocumentali (string xAuthorization);

        /// <summary>
        /// Recupera le classi documentali disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ClassiDocumentaliResponse</returns>
        ApiResponse<ClassiDocumentaliResponse> GetClassiDocumentaliWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera i comuni
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ComuniResponse</returns>
        ComuniResponse GetComuni (string filter, string xAuthorization);

        /// <summary>
        /// Recupera i comuni
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ComuniResponse</returns>
        ApiResponse<ComuniResponse> GetComuniWithHttpInfo (string filter, string xAuthorization);
        /// <summary>
        /// Recupera i distributori di un rivenditore
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>DistributoriResponse</returns>
        DistributoriResponse GetDistributori (Guid? identificativoRivenditore, string xAuthorization);

        /// <summary>
        /// Recupera i distributori di un rivenditore
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of DistributoriResponse</returns>
        ApiResponse<DistributoriResponse> GetDistributoriWithHttpInfo (Guid? identificativoRivenditore, string xAuthorization);
        /// <summary>
        /// Recupera le esigibilità iva
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>EsigibilitaIvaResponse</returns>
        EsigibilitaIvaResponse GetEsigibilitaIva (string xAuthorization);

        /// <summary>
        /// Recupera le esigibilità iva
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of EsigibilitaIvaResponse</returns>
        ApiResponse<EsigibilitaIvaResponse> GetEsigibilitaIvaWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto centro servizi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>FasceIxCeResponse</returns>
        FasceIxCeResponse GetFasceIxCe (string tipoFascia, string xAuthorization);

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto centro servizi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of FasceIxCeResponse</returns>
        ApiResponse<FasceIxCeResponse> GetFasceIxCeWithHttpInfo (string tipoFascia, string xAuthorization);
        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto cliente finale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>FasceIxCeResponse</returns>
        FasceIxCeResponse GetFasceIxCeContrattoClienteFinale (string tipoFascia, string xAuthorization);

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto cliente finale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of FasceIxCeResponse</returns>
        ApiResponse<FasceIxCeResponse> GetFasceIxCeContrattoClienteFinaleWithHttpInfo (string tipoFascia, string xAuthorization);
        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto gruppo aziende
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>FasceIxCeResponse</returns>
        FasceIxCeResponse GetFasceIxCeContrattoGruppoAziende (string tipoFascia, string xAuthorization);

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto gruppo aziende
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of FasceIxCeResponse</returns>
        ApiResponse<FasceIxCeResponse> GetFasceIxCeContrattoGruppoAziendeWithHttpInfo (string tipoFascia, string xAuthorization);
        /// <summary>
        /// Recupera il modello dei metadati di una classe documentale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNormativa">Id normativa</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ModelloClasseDocumentaleResponse</returns>
        ModelloClasseDocumentaleResponse GetModelloClasseDocumentale (string idNormativa, string xAuthorization);

        /// <summary>
        /// Recupera il modello dei metadati di una classe documentale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNormativa">Id normativa</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ModelloClasseDocumentaleResponse</returns>
        ApiResponse<ModelloClasseDocumentaleResponse> GetModelloClasseDocumentaleWithHttpInfo (string idNormativa, string xAuthorization);
        /// <summary>
        /// Recupera i numero soci disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>NumeroSociResponse</returns>
        NumeroSociResponse GetNumeroSoci (string xAuthorization);

        /// <summary>
        /// Recupera i numero soci disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of NumeroSociResponse</returns>
        ApiResponse<NumeroSociResponse> GetNumeroSociWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera i paesi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>PaesiResponse</returns>
        PaesiResponse GetPaesi (string filter, string xAuthorization);

        /// <summary>
        /// Recupera i paesi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of PaesiResponse</returns>
        ApiResponse<PaesiResponse> GetPaesiWithHttpInfo (string filter, string xAuthorization);
        /// <summary>
        /// Recupera i regimi fiscali disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>TipiRegimiFiscaliResponse</returns>
        TipiRegimiFiscaliResponse GetRegimiFiscali (string xAuthorization);

        /// <summary>
        /// Recupera i regimi fiscali disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of TipiRegimiFiscaliResponse</returns>
        ApiResponse<TipiRegimiFiscaliResponse> GetRegimiFiscaliWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera i rivenditori disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>RivenditoriResponse</returns>
        RivenditoriResponse GetRivenditori (string xAuthorization);

        /// <summary>
        /// Recupera i rivenditori disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of RivenditoriResponse</returns>
        ApiResponse<RivenditoriResponse> GetRivenditoriWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera i ruoli di conservazione disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>RuoliConservazioneResponse</returns>
        RuoliConservazioneResponse GetRuoliConservazione (string xAuthorization);

        /// <summary>
        /// Recupera i ruoli di conservazione disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of RuoliConservazioneResponse</returns>
        ApiResponse<RuoliConservazioneResponse> GetRuoliConservazioneWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera le tipologie di contratti disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>TipiContrattoResponse</returns>
        TipiContrattoResponse GetTipiContratti (string xAuthorization);

        /// <summary>
        /// Recupera le tipologie di contratti disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of TipiContrattoResponse</returns>
        ApiResponse<TipiContrattoResponse> GetTipiContrattiWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera le tipologie di firma disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>TipiFirmaResponse</returns>
        TipiFirmaResponse GetTipiFirma (string xAuthorization);

        /// <summary>
        /// Recupera le tipologie di firma disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of TipiFirmaResponse</returns>
        ApiResponse<TipiFirmaResponse> GetTipiFirmaWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera i tool di firma disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ToolsFirmaResponse</returns>
        ToolsFirmaResponse GetToolsFirma (string xAuthorization);

        /// <summary>
        /// Recupera i tool di firma disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ToolsFirmaResponse</returns>
        ApiResponse<ToolsFirmaResponse> GetToolsFirmaWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Valida un codice fiscale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codicefiscale">Codice fiscale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ValidationResponse</returns>
        ValidationResponse ValidaCodiceFiscale (CodiceFiscaleValidatorRequest codicefiscale, string xAuthorization);

        /// <summary>
        /// Valida un codice fiscale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codicefiscale">Codice fiscale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        ApiResponse<ValidationResponse> ValidaCodiceFiscaleWithHttpInfo (CodiceFiscaleValidatorRequest codicefiscale, string xAuthorization);
        /// <summary>
        /// Valida una partita iva
        /// </summary>
        /// <remarks>
        /// Valida una partita iva prima a livello comunitario e poi a livello formale
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitaiva">Partita iva</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>PartitaIvaValidatorResponse</returns>
        PartitaIvaValidatorResponse ValidaPartitaIva (PartitaIvaValidatorRequest partitaiva, string xAuthorization);

        /// <summary>
        /// Valida una partita iva
        /// </summary>
        /// <remarks>
        /// Valida una partita iva prima a livello comunitario e poi a livello formale
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitaiva">Partita iva</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of PartitaIvaValidatorResponse</returns>
        ApiResponse<PartitaIvaValidatorResponse> ValidaPartitaIvaWithHttpInfo (PartitaIvaValidatorRequest partitaiva, string xAuthorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Recupera le classi previdenziali disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of TipiCassePrevidenzialiResponse</returns>
        System.Threading.Tasks.Task<TipiCassePrevidenzialiResponse> GetCassePrevidenzialiAsync (string xAuthorization);

        /// <summary>
        /// Recupera le classi previdenziali disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (TipiCassePrevidenzialiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TipiCassePrevidenzialiResponse>> GetCassePrevidenzialiAsyncWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera le causali di pagamento disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of TipiCausaliPagamentoResponse</returns>
        System.Threading.Tasks.Task<TipiCausaliPagamentoResponse> GetCausaliPagamentoAsync (string xAuthorization);

        /// <summary>
        /// Recupera le causali di pagamento disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (TipiCausaliPagamentoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TipiCausaliPagamentoResponse>> GetCausaliPagamentoAsyncWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera le classi documentali disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ClassiDocumentaliResponse</returns>
        System.Threading.Tasks.Task<ClassiDocumentaliResponse> GetClassiDocumentaliAsync (string xAuthorization);

        /// <summary>
        /// Recupera le classi documentali disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ClassiDocumentaliResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClassiDocumentaliResponse>> GetClassiDocumentaliAsyncWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera i comuni
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ComuniResponse</returns>
        System.Threading.Tasks.Task<ComuniResponse> GetComuniAsync (string filter, string xAuthorization);

        /// <summary>
        /// Recupera i comuni
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ComuniResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComuniResponse>> GetComuniAsyncWithHttpInfo (string filter, string xAuthorization);
        /// <summary>
        /// Recupera i distributori di un rivenditore
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of DistributoriResponse</returns>
        System.Threading.Tasks.Task<DistributoriResponse> GetDistributoriAsync (Guid? identificativoRivenditore, string xAuthorization);

        /// <summary>
        /// Recupera i distributori di un rivenditore
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (DistributoriResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistributoriResponse>> GetDistributoriAsyncWithHttpInfo (Guid? identificativoRivenditore, string xAuthorization);
        /// <summary>
        /// Recupera le esigibilità iva
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of EsigibilitaIvaResponse</returns>
        System.Threading.Tasks.Task<EsigibilitaIvaResponse> GetEsigibilitaIvaAsync (string xAuthorization);

        /// <summary>
        /// Recupera le esigibilità iva
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (EsigibilitaIvaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EsigibilitaIvaResponse>> GetEsigibilitaIvaAsyncWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto centro servizi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of FasceIxCeResponse</returns>
        System.Threading.Tasks.Task<FasceIxCeResponse> GetFasceIxCeAsync (string tipoFascia, string xAuthorization);

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto centro servizi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (FasceIxCeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FasceIxCeResponse>> GetFasceIxCeAsyncWithHttpInfo (string tipoFascia, string xAuthorization);
        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto cliente finale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of FasceIxCeResponse</returns>
        System.Threading.Tasks.Task<FasceIxCeResponse> GetFasceIxCeContrattoClienteFinaleAsync (string tipoFascia, string xAuthorization);

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto cliente finale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (FasceIxCeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FasceIxCeResponse>> GetFasceIxCeContrattoClienteFinaleAsyncWithHttpInfo (string tipoFascia, string xAuthorization);
        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto gruppo aziende
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of FasceIxCeResponse</returns>
        System.Threading.Tasks.Task<FasceIxCeResponse> GetFasceIxCeContrattoGruppoAziendeAsync (string tipoFascia, string xAuthorization);

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto gruppo aziende
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (FasceIxCeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FasceIxCeResponse>> GetFasceIxCeContrattoGruppoAziendeAsyncWithHttpInfo (string tipoFascia, string xAuthorization);
        /// <summary>
        /// Recupera il modello dei metadati di una classe documentale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNormativa">Id normativa</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ModelloClasseDocumentaleResponse</returns>
        System.Threading.Tasks.Task<ModelloClasseDocumentaleResponse> GetModelloClasseDocumentaleAsync (string idNormativa, string xAuthorization);

        /// <summary>
        /// Recupera il modello dei metadati di una classe documentale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNormativa">Id normativa</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ModelloClasseDocumentaleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelloClasseDocumentaleResponse>> GetModelloClasseDocumentaleAsyncWithHttpInfo (string idNormativa, string xAuthorization);
        /// <summary>
        /// Recupera i numero soci disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of NumeroSociResponse</returns>
        System.Threading.Tasks.Task<NumeroSociResponse> GetNumeroSociAsync (string xAuthorization);

        /// <summary>
        /// Recupera i numero soci disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (NumeroSociResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumeroSociResponse>> GetNumeroSociAsyncWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera i paesi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of PaesiResponse</returns>
        System.Threading.Tasks.Task<PaesiResponse> GetPaesiAsync (string filter, string xAuthorization);

        /// <summary>
        /// Recupera i paesi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (PaesiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaesiResponse>> GetPaesiAsyncWithHttpInfo (string filter, string xAuthorization);
        /// <summary>
        /// Recupera i regimi fiscali disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of TipiRegimiFiscaliResponse</returns>
        System.Threading.Tasks.Task<TipiRegimiFiscaliResponse> GetRegimiFiscaliAsync (string xAuthorization);

        /// <summary>
        /// Recupera i regimi fiscali disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (TipiRegimiFiscaliResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TipiRegimiFiscaliResponse>> GetRegimiFiscaliAsyncWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera i rivenditori disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of RivenditoriResponse</returns>
        System.Threading.Tasks.Task<RivenditoriResponse> GetRivenditoriAsync (string xAuthorization);

        /// <summary>
        /// Recupera i rivenditori disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (RivenditoriResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RivenditoriResponse>> GetRivenditoriAsyncWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera i ruoli di conservazione disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of RuoliConservazioneResponse</returns>
        System.Threading.Tasks.Task<RuoliConservazioneResponse> GetRuoliConservazioneAsync (string xAuthorization);

        /// <summary>
        /// Recupera i ruoli di conservazione disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (RuoliConservazioneResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuoliConservazioneResponse>> GetRuoliConservazioneAsyncWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera le tipologie di contratti disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of TipiContrattoResponse</returns>
        System.Threading.Tasks.Task<TipiContrattoResponse> GetTipiContrattiAsync (string xAuthorization);

        /// <summary>
        /// Recupera le tipologie di contratti disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (TipiContrattoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TipiContrattoResponse>> GetTipiContrattiAsyncWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera le tipologie di firma disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of TipiFirmaResponse</returns>
        System.Threading.Tasks.Task<TipiFirmaResponse> GetTipiFirmaAsync (string xAuthorization);

        /// <summary>
        /// Recupera le tipologie di firma disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (TipiFirmaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TipiFirmaResponse>> GetTipiFirmaAsyncWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Recupera i tool di firma disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ToolsFirmaResponse</returns>
        System.Threading.Tasks.Task<ToolsFirmaResponse> GetToolsFirmaAsync (string xAuthorization);

        /// <summary>
        /// Recupera i tool di firma disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ToolsFirmaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolsFirmaResponse>> GetToolsFirmaAsyncWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Valida un codice fiscale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codicefiscale">Codice fiscale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ValidationResponse</returns>
        System.Threading.Tasks.Task<ValidationResponse> ValidaCodiceFiscaleAsync (CodiceFiscaleValidatorRequest codicefiscale, string xAuthorization);

        /// <summary>
        /// Valida un codice fiscale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codicefiscale">Codice fiscale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> ValidaCodiceFiscaleAsyncWithHttpInfo (CodiceFiscaleValidatorRequest codicefiscale, string xAuthorization);
        /// <summary>
        /// Valida una partita iva
        /// </summary>
        /// <remarks>
        /// Valida una partita iva prima a livello comunitario e poi a livello formale
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitaiva">Partita iva</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of PartitaIvaValidatorResponse</returns>
        System.Threading.Tasks.Task<PartitaIvaValidatorResponse> ValidaPartitaIvaAsync (PartitaIvaValidatorRequest partitaiva, string xAuthorization);

        /// <summary>
        /// Valida una partita iva
        /// </summary>
        /// <remarks>
        /// Valida una partita iva prima a livello comunitario e poi a livello formale
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitaiva">Partita iva</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (PartitaIvaValidatorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartitaIvaValidatorResponse>> ValidaPartitaIvaAsyncWithHttpInfo (PartitaIvaValidatorRequest partitaiva, string xAuthorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnagraficheApi : IAnagraficheApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnagraficheApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnagraficheApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnagraficheApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnagraficheApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Recupera le classi previdenziali disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>TipiCassePrevidenzialiResponse</returns>
        public TipiCassePrevidenzialiResponse GetCassePrevidenziali (string xAuthorization)
        {
             ApiResponse<TipiCassePrevidenzialiResponse> localVarResponse = GetCassePrevidenzialiWithHttpInfo(xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera le classi previdenziali disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of TipiCassePrevidenzialiResponse</returns>
        public ApiResponse< TipiCassePrevidenzialiResponse > GetCassePrevidenzialiWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetCassePrevidenziali");

            var localVarPath = "/api/v1/contratti/anagrafiche/casseprevidenziali";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCassePrevidenziali", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TipiCassePrevidenzialiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TipiCassePrevidenzialiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TipiCassePrevidenzialiResponse)));
        }

        /// <summary>
        /// Recupera le classi previdenziali disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of TipiCassePrevidenzialiResponse</returns>
        public async System.Threading.Tasks.Task<TipiCassePrevidenzialiResponse> GetCassePrevidenzialiAsync (string xAuthorization)
        {
             ApiResponse<TipiCassePrevidenzialiResponse> localVarResponse = await GetCassePrevidenzialiAsyncWithHttpInfo(xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera le classi previdenziali disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (TipiCassePrevidenzialiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TipiCassePrevidenzialiResponse>> GetCassePrevidenzialiAsyncWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetCassePrevidenziali");

            var localVarPath = "/api/v1/contratti/anagrafiche/casseprevidenziali";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCassePrevidenziali", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TipiCassePrevidenzialiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TipiCassePrevidenzialiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TipiCassePrevidenzialiResponse)));
        }

        /// <summary>
        /// Recupera le causali di pagamento disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>TipiCausaliPagamentoResponse</returns>
        public TipiCausaliPagamentoResponse GetCausaliPagamento (string xAuthorization)
        {
             ApiResponse<TipiCausaliPagamentoResponse> localVarResponse = GetCausaliPagamentoWithHttpInfo(xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera le causali di pagamento disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of TipiCausaliPagamentoResponse</returns>
        public ApiResponse< TipiCausaliPagamentoResponse > GetCausaliPagamentoWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetCausaliPagamento");

            var localVarPath = "/api/v1/contratti/anagrafiche/causalipagamento";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCausaliPagamento", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TipiCausaliPagamentoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TipiCausaliPagamentoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TipiCausaliPagamentoResponse)));
        }

        /// <summary>
        /// Recupera le causali di pagamento disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of TipiCausaliPagamentoResponse</returns>
        public async System.Threading.Tasks.Task<TipiCausaliPagamentoResponse> GetCausaliPagamentoAsync (string xAuthorization)
        {
             ApiResponse<TipiCausaliPagamentoResponse> localVarResponse = await GetCausaliPagamentoAsyncWithHttpInfo(xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera le causali di pagamento disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (TipiCausaliPagamentoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TipiCausaliPagamentoResponse>> GetCausaliPagamentoAsyncWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetCausaliPagamento");

            var localVarPath = "/api/v1/contratti/anagrafiche/causalipagamento";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCausaliPagamento", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TipiCausaliPagamentoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TipiCausaliPagamentoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TipiCausaliPagamentoResponse)));
        }

        /// <summary>
        /// Recupera le classi documentali disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ClassiDocumentaliResponse</returns>
        public ClassiDocumentaliResponse GetClassiDocumentali (string xAuthorization)
        {
             ApiResponse<ClassiDocumentaliResponse> localVarResponse = GetClassiDocumentaliWithHttpInfo(xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera le classi documentali disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ClassiDocumentaliResponse</returns>
        public ApiResponse< ClassiDocumentaliResponse > GetClassiDocumentaliWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetClassiDocumentali");

            var localVarPath = "/api/v1/contratti/anagrafiche/classidocumentali";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClassiDocumentali", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassiDocumentaliResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassiDocumentaliResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassiDocumentaliResponse)));
        }

        /// <summary>
        /// Recupera le classi documentali disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ClassiDocumentaliResponse</returns>
        public async System.Threading.Tasks.Task<ClassiDocumentaliResponse> GetClassiDocumentaliAsync (string xAuthorization)
        {
             ApiResponse<ClassiDocumentaliResponse> localVarResponse = await GetClassiDocumentaliAsyncWithHttpInfo(xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera le classi documentali disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ClassiDocumentaliResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClassiDocumentaliResponse>> GetClassiDocumentaliAsyncWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetClassiDocumentali");

            var localVarPath = "/api/v1/contratti/anagrafiche/classidocumentali";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClassiDocumentali", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassiDocumentaliResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassiDocumentaliResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassiDocumentaliResponse)));
        }

        /// <summary>
        /// Recupera i comuni 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ComuniResponse</returns>
        public ComuniResponse GetComuni (string filter, string xAuthorization)
        {
             ApiResponse<ComuniResponse> localVarResponse = GetComuniWithHttpInfo(filter, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i comuni 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ComuniResponse</returns>
        public ApiResponse< ComuniResponse > GetComuniWithHttpInfo (string filter, string xAuthorization)
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling AnagraficheApi->GetComuni");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetComuni");

            var localVarPath = "/api/v1/contratti/anagrafiche/comuni/{filter}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarPathParams.Add("filter", this.Configuration.ApiClient.ParameterToString(filter)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComuni", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComuniResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ComuniResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComuniResponse)));
        }

        /// <summary>
        /// Recupera i comuni 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ComuniResponse</returns>
        public async System.Threading.Tasks.Task<ComuniResponse> GetComuniAsync (string filter, string xAuthorization)
        {
             ApiResponse<ComuniResponse> localVarResponse = await GetComuniAsyncWithHttpInfo(filter, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i comuni 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ComuniResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ComuniResponse>> GetComuniAsyncWithHttpInfo (string filter, string xAuthorization)
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling AnagraficheApi->GetComuni");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetComuni");

            var localVarPath = "/api/v1/contratti/anagrafiche/comuni/{filter}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarPathParams.Add("filter", this.Configuration.ApiClient.ParameterToString(filter)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComuni", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComuniResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ComuniResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComuniResponse)));
        }

        /// <summary>
        /// Recupera i distributori di un rivenditore 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>DistributoriResponse</returns>
        public DistributoriResponse GetDistributori (Guid? identificativoRivenditore, string xAuthorization)
        {
             ApiResponse<DistributoriResponse> localVarResponse = GetDistributoriWithHttpInfo(identificativoRivenditore, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i distributori di un rivenditore 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of DistributoriResponse</returns>
        public ApiResponse< DistributoriResponse > GetDistributoriWithHttpInfo (Guid? identificativoRivenditore, string xAuthorization)
        {
            // verify the required parameter 'identificativoRivenditore' is set
            if (identificativoRivenditore == null)
                throw new ApiException(400, "Missing required parameter 'identificativoRivenditore' when calling AnagraficheApi->GetDistributori");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetDistributori");

            var localVarPath = "/api/v1/contratti/anagrafiche/rivenditori/{identificativoRivenditore}/distributori";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identificativoRivenditore != null) localVarPathParams.Add("identificativoRivenditore", this.Configuration.ApiClient.ParameterToString(identificativoRivenditore)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistributori", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistributoriResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistributoriResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistributoriResponse)));
        }

        /// <summary>
        /// Recupera i distributori di un rivenditore 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of DistributoriResponse</returns>
        public async System.Threading.Tasks.Task<DistributoriResponse> GetDistributoriAsync (Guid? identificativoRivenditore, string xAuthorization)
        {
             ApiResponse<DistributoriResponse> localVarResponse = await GetDistributoriAsyncWithHttpInfo(identificativoRivenditore, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i distributori di un rivenditore 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (DistributoriResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistributoriResponse>> GetDistributoriAsyncWithHttpInfo (Guid? identificativoRivenditore, string xAuthorization)
        {
            // verify the required parameter 'identificativoRivenditore' is set
            if (identificativoRivenditore == null)
                throw new ApiException(400, "Missing required parameter 'identificativoRivenditore' when calling AnagraficheApi->GetDistributori");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetDistributori");

            var localVarPath = "/api/v1/contratti/anagrafiche/rivenditori/{identificativoRivenditore}/distributori";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identificativoRivenditore != null) localVarPathParams.Add("identificativoRivenditore", this.Configuration.ApiClient.ParameterToString(identificativoRivenditore)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistributori", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistributoriResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistributoriResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistributoriResponse)));
        }

        /// <summary>
        /// Recupera le esigibilità iva 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>EsigibilitaIvaResponse</returns>
        public EsigibilitaIvaResponse GetEsigibilitaIva (string xAuthorization)
        {
             ApiResponse<EsigibilitaIvaResponse> localVarResponse = GetEsigibilitaIvaWithHttpInfo(xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera le esigibilità iva 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of EsigibilitaIvaResponse</returns>
        public ApiResponse< EsigibilitaIvaResponse > GetEsigibilitaIvaWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetEsigibilitaIva");

            var localVarPath = "/api/v1/contratti/anagrafiche/esigibilitaiva";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEsigibilitaIva", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EsigibilitaIvaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EsigibilitaIvaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EsigibilitaIvaResponse)));
        }

        /// <summary>
        /// Recupera le esigibilità iva 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of EsigibilitaIvaResponse</returns>
        public async System.Threading.Tasks.Task<EsigibilitaIvaResponse> GetEsigibilitaIvaAsync (string xAuthorization)
        {
             ApiResponse<EsigibilitaIvaResponse> localVarResponse = await GetEsigibilitaIvaAsyncWithHttpInfo(xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera le esigibilità iva 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (EsigibilitaIvaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EsigibilitaIvaResponse>> GetEsigibilitaIvaAsyncWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetEsigibilitaIva");

            var localVarPath = "/api/v1/contratti/anagrafiche/esigibilitaiva";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEsigibilitaIva", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EsigibilitaIvaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EsigibilitaIvaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EsigibilitaIvaResponse)));
        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto centro servizi 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>FasceIxCeResponse</returns>
        public FasceIxCeResponse GetFasceIxCe (string tipoFascia, string xAuthorization)
        {
             ApiResponse<FasceIxCeResponse> localVarResponse = GetFasceIxCeWithHttpInfo(tipoFascia, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto centro servizi 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of FasceIxCeResponse</returns>
        public ApiResponse< FasceIxCeResponse > GetFasceIxCeWithHttpInfo (string tipoFascia, string xAuthorization)
        {
            // verify the required parameter 'tipoFascia' is set
            if (tipoFascia == null)
                throw new ApiException(400, "Missing required parameter 'tipoFascia' when calling AnagraficheApi->GetFasceIxCe");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetFasceIxCe");

            var localVarPath = "/api/v1/contratti/centroservizi/fasceixce/{tipoFascia}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoFascia != null) localVarPathParams.Add("tipoFascia", this.Configuration.ApiClient.ParameterToString(tipoFascia)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFasceIxCe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FasceIxCeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FasceIxCeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FasceIxCeResponse)));
        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto centro servizi 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of FasceIxCeResponse</returns>
        public async System.Threading.Tasks.Task<FasceIxCeResponse> GetFasceIxCeAsync (string tipoFascia, string xAuthorization)
        {
             ApiResponse<FasceIxCeResponse> localVarResponse = await GetFasceIxCeAsyncWithHttpInfo(tipoFascia, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto centro servizi 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (FasceIxCeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FasceIxCeResponse>> GetFasceIxCeAsyncWithHttpInfo (string tipoFascia, string xAuthorization)
        {
            // verify the required parameter 'tipoFascia' is set
            if (tipoFascia == null)
                throw new ApiException(400, "Missing required parameter 'tipoFascia' when calling AnagraficheApi->GetFasceIxCe");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetFasceIxCe");

            var localVarPath = "/api/v1/contratti/centroservizi/fasceixce/{tipoFascia}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoFascia != null) localVarPathParams.Add("tipoFascia", this.Configuration.ApiClient.ParameterToString(tipoFascia)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFasceIxCe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FasceIxCeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FasceIxCeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FasceIxCeResponse)));
        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto cliente finale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>FasceIxCeResponse</returns>
        public FasceIxCeResponse GetFasceIxCeContrattoClienteFinale (string tipoFascia, string xAuthorization)
        {
             ApiResponse<FasceIxCeResponse> localVarResponse = GetFasceIxCeContrattoClienteFinaleWithHttpInfo(tipoFascia, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto cliente finale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of FasceIxCeResponse</returns>
        public ApiResponse< FasceIxCeResponse > GetFasceIxCeContrattoClienteFinaleWithHttpInfo (string tipoFascia, string xAuthorization)
        {
            // verify the required parameter 'tipoFascia' is set
            if (tipoFascia == null)
                throw new ApiException(400, "Missing required parameter 'tipoFascia' when calling AnagraficheApi->GetFasceIxCeContrattoClienteFinale");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetFasceIxCeContrattoClienteFinale");

            var localVarPath = "/api/v1/contratti/clientefinale/fasceixce/{tipoFascia}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoFascia != null) localVarPathParams.Add("tipoFascia", this.Configuration.ApiClient.ParameterToString(tipoFascia)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFasceIxCeContrattoClienteFinale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FasceIxCeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FasceIxCeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FasceIxCeResponse)));
        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto cliente finale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of FasceIxCeResponse</returns>
        public async System.Threading.Tasks.Task<FasceIxCeResponse> GetFasceIxCeContrattoClienteFinaleAsync (string tipoFascia, string xAuthorization)
        {
             ApiResponse<FasceIxCeResponse> localVarResponse = await GetFasceIxCeContrattoClienteFinaleAsyncWithHttpInfo(tipoFascia, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto cliente finale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (FasceIxCeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FasceIxCeResponse>> GetFasceIxCeContrattoClienteFinaleAsyncWithHttpInfo (string tipoFascia, string xAuthorization)
        {
            // verify the required parameter 'tipoFascia' is set
            if (tipoFascia == null)
                throw new ApiException(400, "Missing required parameter 'tipoFascia' when calling AnagraficheApi->GetFasceIxCeContrattoClienteFinale");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetFasceIxCeContrattoClienteFinale");

            var localVarPath = "/api/v1/contratti/clientefinale/fasceixce/{tipoFascia}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoFascia != null) localVarPathParams.Add("tipoFascia", this.Configuration.ApiClient.ParameterToString(tipoFascia)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFasceIxCeContrattoClienteFinale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FasceIxCeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FasceIxCeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FasceIxCeResponse)));
        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto gruppo aziende 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>FasceIxCeResponse</returns>
        public FasceIxCeResponse GetFasceIxCeContrattoGruppoAziende (string tipoFascia, string xAuthorization)
        {
             ApiResponse<FasceIxCeResponse> localVarResponse = GetFasceIxCeContrattoGruppoAziendeWithHttpInfo(tipoFascia, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto gruppo aziende 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of FasceIxCeResponse</returns>
        public ApiResponse< FasceIxCeResponse > GetFasceIxCeContrattoGruppoAziendeWithHttpInfo (string tipoFascia, string xAuthorization)
        {
            // verify the required parameter 'tipoFascia' is set
            if (tipoFascia == null)
                throw new ApiException(400, "Missing required parameter 'tipoFascia' when calling AnagraficheApi->GetFasceIxCeContrattoGruppoAziende");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetFasceIxCeContrattoGruppoAziende");

            var localVarPath = "/api/v1/contratti/gruppoaziende/fasceixce/{tipoFascia}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoFascia != null) localVarPathParams.Add("tipoFascia", this.Configuration.ApiClient.ParameterToString(tipoFascia)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFasceIxCeContrattoGruppoAziende", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FasceIxCeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FasceIxCeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FasceIxCeResponse)));
        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto gruppo aziende 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of FasceIxCeResponse</returns>
        public async System.Threading.Tasks.Task<FasceIxCeResponse> GetFasceIxCeContrattoGruppoAziendeAsync (string tipoFascia, string xAuthorization)
        {
             ApiResponse<FasceIxCeResponse> localVarResponse = await GetFasceIxCeContrattoGruppoAziendeAsyncWithHttpInfo(tipoFascia, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto gruppo aziende 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (FasceIxCeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FasceIxCeResponse>> GetFasceIxCeContrattoGruppoAziendeAsyncWithHttpInfo (string tipoFascia, string xAuthorization)
        {
            // verify the required parameter 'tipoFascia' is set
            if (tipoFascia == null)
                throw new ApiException(400, "Missing required parameter 'tipoFascia' when calling AnagraficheApi->GetFasceIxCeContrattoGruppoAziende");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetFasceIxCeContrattoGruppoAziende");

            var localVarPath = "/api/v1/contratti/gruppoaziende/fasceixce/{tipoFascia}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoFascia != null) localVarPathParams.Add("tipoFascia", this.Configuration.ApiClient.ParameterToString(tipoFascia)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFasceIxCeContrattoGruppoAziende", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FasceIxCeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FasceIxCeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FasceIxCeResponse)));
        }

        /// <summary>
        /// Recupera il modello dei metadati di una classe documentale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNormativa">Id normativa</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ModelloClasseDocumentaleResponse</returns>
        public ModelloClasseDocumentaleResponse GetModelloClasseDocumentale (string idNormativa, string xAuthorization)
        {
             ApiResponse<ModelloClasseDocumentaleResponse> localVarResponse = GetModelloClasseDocumentaleWithHttpInfo(idNormativa, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera il modello dei metadati di una classe documentale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNormativa">Id normativa</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ModelloClasseDocumentaleResponse</returns>
        public ApiResponse< ModelloClasseDocumentaleResponse > GetModelloClasseDocumentaleWithHttpInfo (string idNormativa, string xAuthorization)
        {
            // verify the required parameter 'idNormativa' is set
            if (idNormativa == null)
                throw new ApiException(400, "Missing required parameter 'idNormativa' when calling AnagraficheApi->GetModelloClasseDocumentale");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetModelloClasseDocumentale");

            var localVarPath = "/api/v1/contratti/anagrafiche/classidocumentali/{idNormativa}/metadati/modello";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idNormativa != null) localVarPathParams.Add("idNormativa", this.Configuration.ApiClient.ParameterToString(idNormativa)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelloClasseDocumentale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelloClasseDocumentaleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelloClasseDocumentaleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelloClasseDocumentaleResponse)));
        }

        /// <summary>
        /// Recupera il modello dei metadati di una classe documentale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNormativa">Id normativa</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ModelloClasseDocumentaleResponse</returns>
        public async System.Threading.Tasks.Task<ModelloClasseDocumentaleResponse> GetModelloClasseDocumentaleAsync (string idNormativa, string xAuthorization)
        {
             ApiResponse<ModelloClasseDocumentaleResponse> localVarResponse = await GetModelloClasseDocumentaleAsyncWithHttpInfo(idNormativa, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera il modello dei metadati di una classe documentale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNormativa">Id normativa</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ModelloClasseDocumentaleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelloClasseDocumentaleResponse>> GetModelloClasseDocumentaleAsyncWithHttpInfo (string idNormativa, string xAuthorization)
        {
            // verify the required parameter 'idNormativa' is set
            if (idNormativa == null)
                throw new ApiException(400, "Missing required parameter 'idNormativa' when calling AnagraficheApi->GetModelloClasseDocumentale");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetModelloClasseDocumentale");

            var localVarPath = "/api/v1/contratti/anagrafiche/classidocumentali/{idNormativa}/metadati/modello";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idNormativa != null) localVarPathParams.Add("idNormativa", this.Configuration.ApiClient.ParameterToString(idNormativa)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelloClasseDocumentale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelloClasseDocumentaleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelloClasseDocumentaleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelloClasseDocumentaleResponse)));
        }

        /// <summary>
        /// Recupera i numero soci disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>NumeroSociResponse</returns>
        public NumeroSociResponse GetNumeroSoci (string xAuthorization)
        {
             ApiResponse<NumeroSociResponse> localVarResponse = GetNumeroSociWithHttpInfo(xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i numero soci disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of NumeroSociResponse</returns>
        public ApiResponse< NumeroSociResponse > GetNumeroSociWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetNumeroSoci");

            var localVarPath = "/api/v1/contratti/anagrafiche/numerosoci";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNumeroSoci", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumeroSociResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumeroSociResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumeroSociResponse)));
        }

        /// <summary>
        /// Recupera i numero soci disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of NumeroSociResponse</returns>
        public async System.Threading.Tasks.Task<NumeroSociResponse> GetNumeroSociAsync (string xAuthorization)
        {
             ApiResponse<NumeroSociResponse> localVarResponse = await GetNumeroSociAsyncWithHttpInfo(xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i numero soci disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (NumeroSociResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumeroSociResponse>> GetNumeroSociAsyncWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetNumeroSoci");

            var localVarPath = "/api/v1/contratti/anagrafiche/numerosoci";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNumeroSoci", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumeroSociResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumeroSociResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumeroSociResponse)));
        }

        /// <summary>
        /// Recupera i paesi 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>PaesiResponse</returns>
        public PaesiResponse GetPaesi (string filter, string xAuthorization)
        {
             ApiResponse<PaesiResponse> localVarResponse = GetPaesiWithHttpInfo(filter, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i paesi 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of PaesiResponse</returns>
        public ApiResponse< PaesiResponse > GetPaesiWithHttpInfo (string filter, string xAuthorization)
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling AnagraficheApi->GetPaesi");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetPaesi");

            var localVarPath = "/api/v1/contratti/anagrafiche/paesi/{filter}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarPathParams.Add("filter", this.Configuration.ApiClient.ParameterToString(filter)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaesi", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaesiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaesiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaesiResponse)));
        }

        /// <summary>
        /// Recupera i paesi 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of PaesiResponse</returns>
        public async System.Threading.Tasks.Task<PaesiResponse> GetPaesiAsync (string filter, string xAuthorization)
        {
             ApiResponse<PaesiResponse> localVarResponse = await GetPaesiAsyncWithHttpInfo(filter, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i paesi 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (PaesiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaesiResponse>> GetPaesiAsyncWithHttpInfo (string filter, string xAuthorization)
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling AnagraficheApi->GetPaesi");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetPaesi");

            var localVarPath = "/api/v1/contratti/anagrafiche/paesi/{filter}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarPathParams.Add("filter", this.Configuration.ApiClient.ParameterToString(filter)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaesi", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaesiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaesiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaesiResponse)));
        }

        /// <summary>
        /// Recupera i regimi fiscali disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>TipiRegimiFiscaliResponse</returns>
        public TipiRegimiFiscaliResponse GetRegimiFiscali (string xAuthorization)
        {
             ApiResponse<TipiRegimiFiscaliResponse> localVarResponse = GetRegimiFiscaliWithHttpInfo(xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i regimi fiscali disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of TipiRegimiFiscaliResponse</returns>
        public ApiResponse< TipiRegimiFiscaliResponse > GetRegimiFiscaliWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetRegimiFiscali");

            var localVarPath = "/api/v1/contratti/anagrafiche/regimifiscali";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegimiFiscali", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TipiRegimiFiscaliResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TipiRegimiFiscaliResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TipiRegimiFiscaliResponse)));
        }

        /// <summary>
        /// Recupera i regimi fiscali disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of TipiRegimiFiscaliResponse</returns>
        public async System.Threading.Tasks.Task<TipiRegimiFiscaliResponse> GetRegimiFiscaliAsync (string xAuthorization)
        {
             ApiResponse<TipiRegimiFiscaliResponse> localVarResponse = await GetRegimiFiscaliAsyncWithHttpInfo(xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i regimi fiscali disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (TipiRegimiFiscaliResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TipiRegimiFiscaliResponse>> GetRegimiFiscaliAsyncWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetRegimiFiscali");

            var localVarPath = "/api/v1/contratti/anagrafiche/regimifiscali";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegimiFiscali", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TipiRegimiFiscaliResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TipiRegimiFiscaliResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TipiRegimiFiscaliResponse)));
        }

        /// <summary>
        /// Recupera i rivenditori disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>RivenditoriResponse</returns>
        public RivenditoriResponse GetRivenditori (string xAuthorization)
        {
             ApiResponse<RivenditoriResponse> localVarResponse = GetRivenditoriWithHttpInfo(xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i rivenditori disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of RivenditoriResponse</returns>
        public ApiResponse< RivenditoriResponse > GetRivenditoriWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetRivenditori");

            var localVarPath = "/api/v1/contratti/anagrafiche/rivenditori";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRivenditori", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RivenditoriResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RivenditoriResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RivenditoriResponse)));
        }

        /// <summary>
        /// Recupera i rivenditori disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of RivenditoriResponse</returns>
        public async System.Threading.Tasks.Task<RivenditoriResponse> GetRivenditoriAsync (string xAuthorization)
        {
             ApiResponse<RivenditoriResponse> localVarResponse = await GetRivenditoriAsyncWithHttpInfo(xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i rivenditori disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (RivenditoriResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RivenditoriResponse>> GetRivenditoriAsyncWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetRivenditori");

            var localVarPath = "/api/v1/contratti/anagrafiche/rivenditori";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRivenditori", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RivenditoriResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RivenditoriResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RivenditoriResponse)));
        }

        /// <summary>
        /// Recupera i ruoli di conservazione disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>RuoliConservazioneResponse</returns>
        public RuoliConservazioneResponse GetRuoliConservazione (string xAuthorization)
        {
             ApiResponse<RuoliConservazioneResponse> localVarResponse = GetRuoliConservazioneWithHttpInfo(xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i ruoli di conservazione disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of RuoliConservazioneResponse</returns>
        public ApiResponse< RuoliConservazioneResponse > GetRuoliConservazioneWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetRuoliConservazione");

            var localVarPath = "/api/v1/contratti/aoos/utenti/anagrafiche/ruoliconservazione";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRuoliConservazione", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RuoliConservazioneResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RuoliConservazioneResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RuoliConservazioneResponse)));
        }

        /// <summary>
        /// Recupera i ruoli di conservazione disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of RuoliConservazioneResponse</returns>
        public async System.Threading.Tasks.Task<RuoliConservazioneResponse> GetRuoliConservazioneAsync (string xAuthorization)
        {
             ApiResponse<RuoliConservazioneResponse> localVarResponse = await GetRuoliConservazioneAsyncWithHttpInfo(xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i ruoli di conservazione disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (RuoliConservazioneResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RuoliConservazioneResponse>> GetRuoliConservazioneAsyncWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetRuoliConservazione");

            var localVarPath = "/api/v1/contratti/aoos/utenti/anagrafiche/ruoliconservazione";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRuoliConservazione", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RuoliConservazioneResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RuoliConservazioneResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RuoliConservazioneResponse)));
        }

        /// <summary>
        /// Recupera le tipologie di contratti disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>TipiContrattoResponse</returns>
        public TipiContrattoResponse GetTipiContratti (string xAuthorization)
        {
             ApiResponse<TipiContrattoResponse> localVarResponse = GetTipiContrattiWithHttpInfo(xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera le tipologie di contratti disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of TipiContrattoResponse</returns>
        public ApiResponse< TipiContrattoResponse > GetTipiContrattiWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetTipiContratti");

            var localVarPath = "/api/v1/contratti/anagrafiche/tipicontratti";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTipiContratti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TipiContrattoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TipiContrattoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TipiContrattoResponse)));
        }

        /// <summary>
        /// Recupera le tipologie di contratti disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of TipiContrattoResponse</returns>
        public async System.Threading.Tasks.Task<TipiContrattoResponse> GetTipiContrattiAsync (string xAuthorization)
        {
             ApiResponse<TipiContrattoResponse> localVarResponse = await GetTipiContrattiAsyncWithHttpInfo(xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera le tipologie di contratti disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (TipiContrattoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TipiContrattoResponse>> GetTipiContrattiAsyncWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetTipiContratti");

            var localVarPath = "/api/v1/contratti/anagrafiche/tipicontratti";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTipiContratti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TipiContrattoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TipiContrattoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TipiContrattoResponse)));
        }

        /// <summary>
        /// Recupera le tipologie di firma disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>TipiFirmaResponse</returns>
        public TipiFirmaResponse GetTipiFirma (string xAuthorization)
        {
             ApiResponse<TipiFirmaResponse> localVarResponse = GetTipiFirmaWithHttpInfo(xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera le tipologie di firma disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of TipiFirmaResponse</returns>
        public ApiResponse< TipiFirmaResponse > GetTipiFirmaWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetTipiFirma");

            var localVarPath = "/api/v1/contratti/aoos/anagrafiche/tipifirma";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTipiFirma", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TipiFirmaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TipiFirmaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TipiFirmaResponse)));
        }

        /// <summary>
        /// Recupera le tipologie di firma disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of TipiFirmaResponse</returns>
        public async System.Threading.Tasks.Task<TipiFirmaResponse> GetTipiFirmaAsync (string xAuthorization)
        {
             ApiResponse<TipiFirmaResponse> localVarResponse = await GetTipiFirmaAsyncWithHttpInfo(xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera le tipologie di firma disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (TipiFirmaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TipiFirmaResponse>> GetTipiFirmaAsyncWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetTipiFirma");

            var localVarPath = "/api/v1/contratti/aoos/anagrafiche/tipifirma";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTipiFirma", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TipiFirmaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TipiFirmaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TipiFirmaResponse)));
        }

        /// <summary>
        /// Recupera i tool di firma disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ToolsFirmaResponse</returns>
        public ToolsFirmaResponse GetToolsFirma (string xAuthorization)
        {
             ApiResponse<ToolsFirmaResponse> localVarResponse = GetToolsFirmaWithHttpInfo(xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i tool di firma disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ToolsFirmaResponse</returns>
        public ApiResponse< ToolsFirmaResponse > GetToolsFirmaWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetToolsFirma");

            var localVarPath = "/api/v1/contratti/anagrafiche/classidocumentali/toolsfirma";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetToolsFirma", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ToolsFirmaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ToolsFirmaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ToolsFirmaResponse)));
        }

        /// <summary>
        /// Recupera i tool di firma disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ToolsFirmaResponse</returns>
        public async System.Threading.Tasks.Task<ToolsFirmaResponse> GetToolsFirmaAsync (string xAuthorization)
        {
             ApiResponse<ToolsFirmaResponse> localVarResponse = await GetToolsFirmaAsyncWithHttpInfo(xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i tool di firma disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ToolsFirmaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ToolsFirmaResponse>> GetToolsFirmaAsyncWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetToolsFirma");

            var localVarPath = "/api/v1/contratti/anagrafiche/classidocumentali/toolsfirma";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetToolsFirma", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ToolsFirmaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ToolsFirmaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ToolsFirmaResponse)));
        }

        /// <summary>
        /// Valida un codice fiscale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codicefiscale">Codice fiscale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ValidationResponse</returns>
        public ValidationResponse ValidaCodiceFiscale (CodiceFiscaleValidatorRequest codicefiscale, string xAuthorization)
        {
             ApiResponse<ValidationResponse> localVarResponse = ValidaCodiceFiscaleWithHttpInfo(codicefiscale, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Valida un codice fiscale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codicefiscale">Codice fiscale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        public ApiResponse< ValidationResponse > ValidaCodiceFiscaleWithHttpInfo (CodiceFiscaleValidatorRequest codicefiscale, string xAuthorization)
        {
            // verify the required parameter 'codicefiscale' is set
            if (codicefiscale == null)
                throw new ApiException(400, "Missing required parameter 'codicefiscale' when calling AnagraficheApi->ValidaCodiceFiscale");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->ValidaCodiceFiscale");

            var localVarPath = "/api/v1/contratti/anagrafiche/codicefiscale/valida";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codicefiscale != null && codicefiscale.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(codicefiscale); // http body (model) parameter
            }
            else
            {
                localVarPostBody = codicefiscale; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidaCodiceFiscale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Valida un codice fiscale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codicefiscale">Codice fiscale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ValidationResponse</returns>
        public async System.Threading.Tasks.Task<ValidationResponse> ValidaCodiceFiscaleAsync (CodiceFiscaleValidatorRequest codicefiscale, string xAuthorization)
        {
             ApiResponse<ValidationResponse> localVarResponse = await ValidaCodiceFiscaleAsyncWithHttpInfo(codicefiscale, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Valida un codice fiscale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codicefiscale">Codice fiscale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> ValidaCodiceFiscaleAsyncWithHttpInfo (CodiceFiscaleValidatorRequest codicefiscale, string xAuthorization)
        {
            // verify the required parameter 'codicefiscale' is set
            if (codicefiscale == null)
                throw new ApiException(400, "Missing required parameter 'codicefiscale' when calling AnagraficheApi->ValidaCodiceFiscale");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->ValidaCodiceFiscale");

            var localVarPath = "/api/v1/contratti/anagrafiche/codicefiscale/valida";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codicefiscale != null && codicefiscale.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(codicefiscale); // http body (model) parameter
            }
            else
            {
                localVarPostBody = codicefiscale; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidaCodiceFiscale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Valida una partita iva Valida una partita iva prima a livello comunitario e poi a livello formale
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitaiva">Partita iva</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>PartitaIvaValidatorResponse</returns>
        public PartitaIvaValidatorResponse ValidaPartitaIva (PartitaIvaValidatorRequest partitaiva, string xAuthorization)
        {
             ApiResponse<PartitaIvaValidatorResponse> localVarResponse = ValidaPartitaIvaWithHttpInfo(partitaiva, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Valida una partita iva Valida una partita iva prima a livello comunitario e poi a livello formale
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitaiva">Partita iva</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of PartitaIvaValidatorResponse</returns>
        public ApiResponse< PartitaIvaValidatorResponse > ValidaPartitaIvaWithHttpInfo (PartitaIvaValidatorRequest partitaiva, string xAuthorization)
        {
            // verify the required parameter 'partitaiva' is set
            if (partitaiva == null)
                throw new ApiException(400, "Missing required parameter 'partitaiva' when calling AnagraficheApi->ValidaPartitaIva");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->ValidaPartitaIva");

            var localVarPath = "/api/v1/contratti/anagrafiche/partitaiva/valida";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (partitaiva != null && partitaiva.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(partitaiva); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partitaiva; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidaPartitaIva", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PartitaIvaValidatorResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PartitaIvaValidatorResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PartitaIvaValidatorResponse)));
        }

        /// <summary>
        /// Valida una partita iva Valida una partita iva prima a livello comunitario e poi a livello formale
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitaiva">Partita iva</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of PartitaIvaValidatorResponse</returns>
        public async System.Threading.Tasks.Task<PartitaIvaValidatorResponse> ValidaPartitaIvaAsync (PartitaIvaValidatorRequest partitaiva, string xAuthorization)
        {
             ApiResponse<PartitaIvaValidatorResponse> localVarResponse = await ValidaPartitaIvaAsyncWithHttpInfo(partitaiva, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Valida una partita iva Valida una partita iva prima a livello comunitario e poi a livello formale
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitaiva">Partita iva</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (PartitaIvaValidatorResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PartitaIvaValidatorResponse>> ValidaPartitaIvaAsyncWithHttpInfo (PartitaIvaValidatorRequest partitaiva, string xAuthorization)
        {
            // verify the required parameter 'partitaiva' is set
            if (partitaiva == null)
                throw new ApiException(400, "Missing required parameter 'partitaiva' when calling AnagraficheApi->ValidaPartitaIva");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->ValidaPartitaIva");

            var localVarPath = "/api/v1/contratti/anagrafiche/partitaiva/valida";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (partitaiva != null && partitaiva.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(partitaiva); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partitaiva; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidaPartitaIva", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PartitaIvaValidatorResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PartitaIvaValidatorResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PartitaIvaValidatorResponse)));
        }

    }
}
