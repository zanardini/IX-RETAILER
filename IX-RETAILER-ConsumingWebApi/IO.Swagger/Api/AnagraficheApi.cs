/* 
 * Contratti API V2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnagraficheApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Recupera i comuni
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ComuniResponse</returns>
        ComuniResponse GetComuni (string filter, string xAuthorization);

        /// <summary>
        /// Recupera i comuni
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ComuniResponse</returns>
        ApiResponse<ComuniResponse> GetComuniWithHttpInfo (string filter, string xAuthorization);
        /// <summary>
        /// Recupera i distributori di un rivenditore
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>DistributoriResponse</returns>
        DistributoriResponse GetDistributori (Guid? identificativoRivenditore, string xAuthorization);

        /// <summary>
        /// Recupera i distributori di un rivenditore
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of DistributoriResponse</returns>
        ApiResponse<DistributoriResponse> GetDistributoriWithHttpInfo (Guid? identificativoRivenditore, string xAuthorization);
        /// <summary>
        /// Recupera i paesi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>PaesiResponse</returns>
        PaesiResponse GetPaesi (string filter, string xAuthorization);

        /// <summary>
        /// Recupera i paesi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of PaesiResponse</returns>
        ApiResponse<PaesiResponse> GetPaesiWithHttpInfo (string filter, string xAuthorization);
        /// <summary>
        /// Recupera i rivenditori disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>RivenditoriResponse</returns>
        RivenditoriResponse GetRivenditori (string xAuthorization);

        /// <summary>
        /// Recupera i rivenditori disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of RivenditoriResponse</returns>
        ApiResponse<RivenditoriResponse> GetRivenditoriWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Valida un codice fiscale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codicefiscale">Codice fiscale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ValidationResponse</returns>
        ValidationResponse ValidaCodiceFiscale (CodiceFiscaleValidatorRequest codicefiscale, string xAuthorization);

        /// <summary>
        /// Valida un codice fiscale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codicefiscale">Codice fiscale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        ApiResponse<ValidationResponse> ValidaCodiceFiscaleWithHttpInfo (CodiceFiscaleValidatorRequest codicefiscale, string xAuthorization);
        /// <summary>
        /// Valida una partita iva
        /// </summary>
        /// <remarks>
        /// Valida una partita iva prima a livello comunitario e poi a livello formale
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitaiva">Partita iva</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>PartitaIvaValidatorResponse</returns>
        PartitaIvaValidatorResponse ValidaPartitaIva (PartitaIvaValidatorRequest partitaiva, string xAuthorization);

        /// <summary>
        /// Valida una partita iva
        /// </summary>
        /// <remarks>
        /// Valida una partita iva prima a livello comunitario e poi a livello formale
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitaiva">Partita iva</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of PartitaIvaValidatorResponse</returns>
        ApiResponse<PartitaIvaValidatorResponse> ValidaPartitaIvaWithHttpInfo (PartitaIvaValidatorRequest partitaiva, string xAuthorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Recupera i comuni
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ComuniResponse</returns>
        System.Threading.Tasks.Task<ComuniResponse> GetComuniAsync (string filter, string xAuthorization);

        /// <summary>
        /// Recupera i comuni
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ComuniResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComuniResponse>> GetComuniAsyncWithHttpInfo (string filter, string xAuthorization);
        /// <summary>
        /// Recupera i distributori di un rivenditore
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of DistributoriResponse</returns>
        System.Threading.Tasks.Task<DistributoriResponse> GetDistributoriAsync (Guid? identificativoRivenditore, string xAuthorization);

        /// <summary>
        /// Recupera i distributori di un rivenditore
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (DistributoriResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistributoriResponse>> GetDistributoriAsyncWithHttpInfo (Guid? identificativoRivenditore, string xAuthorization);
        /// <summary>
        /// Recupera i paesi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of PaesiResponse</returns>
        System.Threading.Tasks.Task<PaesiResponse> GetPaesiAsync (string filter, string xAuthorization);

        /// <summary>
        /// Recupera i paesi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (PaesiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaesiResponse>> GetPaesiAsyncWithHttpInfo (string filter, string xAuthorization);
        /// <summary>
        /// Recupera i rivenditori disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of RivenditoriResponse</returns>
        System.Threading.Tasks.Task<RivenditoriResponse> GetRivenditoriAsync (string xAuthorization);

        /// <summary>
        /// Recupera i rivenditori disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (RivenditoriResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RivenditoriResponse>> GetRivenditoriAsyncWithHttpInfo (string xAuthorization);
        /// <summary>
        /// Valida un codice fiscale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codicefiscale">Codice fiscale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ValidationResponse</returns>
        System.Threading.Tasks.Task<ValidationResponse> ValidaCodiceFiscaleAsync (CodiceFiscaleValidatorRequest codicefiscale, string xAuthorization);

        /// <summary>
        /// Valida un codice fiscale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codicefiscale">Codice fiscale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> ValidaCodiceFiscaleAsyncWithHttpInfo (CodiceFiscaleValidatorRequest codicefiscale, string xAuthorization);
        /// <summary>
        /// Valida una partita iva
        /// </summary>
        /// <remarks>
        /// Valida una partita iva prima a livello comunitario e poi a livello formale
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitaiva">Partita iva</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of PartitaIvaValidatorResponse</returns>
        System.Threading.Tasks.Task<PartitaIvaValidatorResponse> ValidaPartitaIvaAsync (PartitaIvaValidatorRequest partitaiva, string xAuthorization);

        /// <summary>
        /// Valida una partita iva
        /// </summary>
        /// <remarks>
        /// Valida una partita iva prima a livello comunitario e poi a livello formale
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitaiva">Partita iva</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (PartitaIvaValidatorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartitaIvaValidatorResponse>> ValidaPartitaIvaAsyncWithHttpInfo (PartitaIvaValidatorRequest partitaiva, string xAuthorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnagraficheApi : IAnagraficheApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnagraficheApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnagraficheApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnagraficheApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnagraficheApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Recupera i comuni 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ComuniResponse</returns>
        public ComuniResponse GetComuni (string filter, string xAuthorization)
        {
             ApiResponse<ComuniResponse> localVarResponse = GetComuniWithHttpInfo(filter, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i comuni 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ComuniResponse</returns>
        public ApiResponse< ComuniResponse > GetComuniWithHttpInfo (string filter, string xAuthorization)
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling AnagraficheApi->GetComuni");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetComuni");

            var localVarPath = "/api/v2/contratti/anagrafiche/comuni/{filter}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarPathParams.Add("filter", this.Configuration.ApiClient.ParameterToString(filter)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComuni", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComuniResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ComuniResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComuniResponse)));
        }

        /// <summary>
        /// Recupera i comuni 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ComuniResponse</returns>
        public async System.Threading.Tasks.Task<ComuniResponse> GetComuniAsync (string filter, string xAuthorization)
        {
             ApiResponse<ComuniResponse> localVarResponse = await GetComuniAsyncWithHttpInfo(filter, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i comuni 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ComuniResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ComuniResponse>> GetComuniAsyncWithHttpInfo (string filter, string xAuthorization)
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling AnagraficheApi->GetComuni");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetComuni");

            var localVarPath = "/api/v2/contratti/anagrafiche/comuni/{filter}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarPathParams.Add("filter", this.Configuration.ApiClient.ParameterToString(filter)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComuni", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComuniResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ComuniResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComuniResponse)));
        }

        /// <summary>
        /// Recupera i distributori di un rivenditore 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>DistributoriResponse</returns>
        public DistributoriResponse GetDistributori (Guid? identificativoRivenditore, string xAuthorization)
        {
             ApiResponse<DistributoriResponse> localVarResponse = GetDistributoriWithHttpInfo(identificativoRivenditore, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i distributori di un rivenditore 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of DistributoriResponse</returns>
        public ApiResponse< DistributoriResponse > GetDistributoriWithHttpInfo (Guid? identificativoRivenditore, string xAuthorization)
        {
            // verify the required parameter 'identificativoRivenditore' is set
            if (identificativoRivenditore == null)
                throw new ApiException(400, "Missing required parameter 'identificativoRivenditore' when calling AnagraficheApi->GetDistributori");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetDistributori");

            var localVarPath = "/api/v2/contratti/anagrafiche/rivenditori/{identificativoRivenditore}/distributori";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identificativoRivenditore != null) localVarPathParams.Add("identificativoRivenditore", this.Configuration.ApiClient.ParameterToString(identificativoRivenditore)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistributori", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistributoriResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistributoriResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistributoriResponse)));
        }

        /// <summary>
        /// Recupera i distributori di un rivenditore 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of DistributoriResponse</returns>
        public async System.Threading.Tasks.Task<DistributoriResponse> GetDistributoriAsync (Guid? identificativoRivenditore, string xAuthorization)
        {
             ApiResponse<DistributoriResponse> localVarResponse = await GetDistributoriAsyncWithHttpInfo(identificativoRivenditore, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i distributori di un rivenditore 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (DistributoriResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistributoriResponse>> GetDistributoriAsyncWithHttpInfo (Guid? identificativoRivenditore, string xAuthorization)
        {
            // verify the required parameter 'identificativoRivenditore' is set
            if (identificativoRivenditore == null)
                throw new ApiException(400, "Missing required parameter 'identificativoRivenditore' when calling AnagraficheApi->GetDistributori");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetDistributori");

            var localVarPath = "/api/v2/contratti/anagrafiche/rivenditori/{identificativoRivenditore}/distributori";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identificativoRivenditore != null) localVarPathParams.Add("identificativoRivenditore", this.Configuration.ApiClient.ParameterToString(identificativoRivenditore)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistributori", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistributoriResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistributoriResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistributoriResponse)));
        }

        /// <summary>
        /// Recupera i paesi 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>PaesiResponse</returns>
        public PaesiResponse GetPaesi (string filter, string xAuthorization)
        {
             ApiResponse<PaesiResponse> localVarResponse = GetPaesiWithHttpInfo(filter, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i paesi 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of PaesiResponse</returns>
        public ApiResponse< PaesiResponse > GetPaesiWithHttpInfo (string filter, string xAuthorization)
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling AnagraficheApi->GetPaesi");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetPaesi");

            var localVarPath = "/api/v2/contratti/anagrafiche/paesi/{filter}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarPathParams.Add("filter", this.Configuration.ApiClient.ParameterToString(filter)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaesi", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaesiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaesiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaesiResponse)));
        }

        /// <summary>
        /// Recupera i paesi 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of PaesiResponse</returns>
        public async System.Threading.Tasks.Task<PaesiResponse> GetPaesiAsync (string filter, string xAuthorization)
        {
             ApiResponse<PaesiResponse> localVarResponse = await GetPaesiAsyncWithHttpInfo(filter, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i paesi 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filtro di ricerca</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (PaesiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaesiResponse>> GetPaesiAsyncWithHttpInfo (string filter, string xAuthorization)
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling AnagraficheApi->GetPaesi");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetPaesi");

            var localVarPath = "/api/v2/contratti/anagrafiche/paesi/{filter}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarPathParams.Add("filter", this.Configuration.ApiClient.ParameterToString(filter)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaesi", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaesiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaesiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaesiResponse)));
        }

        /// <summary>
        /// Recupera i rivenditori disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>RivenditoriResponse</returns>
        public RivenditoriResponse GetRivenditori (string xAuthorization)
        {
             ApiResponse<RivenditoriResponse> localVarResponse = GetRivenditoriWithHttpInfo(xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i rivenditori disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of RivenditoriResponse</returns>
        public ApiResponse< RivenditoriResponse > GetRivenditoriWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetRivenditori");

            var localVarPath = "/api/v2/contratti/anagrafiche/rivenditori";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRivenditori", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RivenditoriResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RivenditoriResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RivenditoriResponse)));
        }

        /// <summary>
        /// Recupera i rivenditori disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of RivenditoriResponse</returns>
        public async System.Threading.Tasks.Task<RivenditoriResponse> GetRivenditoriAsync (string xAuthorization)
        {
             ApiResponse<RivenditoriResponse> localVarResponse = await GetRivenditoriAsyncWithHttpInfo(xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i rivenditori disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (RivenditoriResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RivenditoriResponse>> GetRivenditoriAsyncWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->GetRivenditori");

            var localVarPath = "/api/v2/contratti/anagrafiche/rivenditori";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRivenditori", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RivenditoriResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RivenditoriResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RivenditoriResponse)));
        }

        /// <summary>
        /// Valida un codice fiscale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codicefiscale">Codice fiscale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ValidationResponse</returns>
        public ValidationResponse ValidaCodiceFiscale (CodiceFiscaleValidatorRequest codicefiscale, string xAuthorization)
        {
             ApiResponse<ValidationResponse> localVarResponse = ValidaCodiceFiscaleWithHttpInfo(codicefiscale, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Valida un codice fiscale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codicefiscale">Codice fiscale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        public ApiResponse< ValidationResponse > ValidaCodiceFiscaleWithHttpInfo (CodiceFiscaleValidatorRequest codicefiscale, string xAuthorization)
        {
            // verify the required parameter 'codicefiscale' is set
            if (codicefiscale == null)
                throw new ApiException(400, "Missing required parameter 'codicefiscale' when calling AnagraficheApi->ValidaCodiceFiscale");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->ValidaCodiceFiscale");

            var localVarPath = "/api/v2/contratti/anagrafiche/codicefiscale/valida";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codicefiscale != null && codicefiscale.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(codicefiscale); // http body (model) parameter
            }
            else
            {
                localVarPostBody = codicefiscale; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidaCodiceFiscale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Valida un codice fiscale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codicefiscale">Codice fiscale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ValidationResponse</returns>
        public async System.Threading.Tasks.Task<ValidationResponse> ValidaCodiceFiscaleAsync (CodiceFiscaleValidatorRequest codicefiscale, string xAuthorization)
        {
             ApiResponse<ValidationResponse> localVarResponse = await ValidaCodiceFiscaleAsyncWithHttpInfo(codicefiscale, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Valida un codice fiscale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codicefiscale">Codice fiscale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> ValidaCodiceFiscaleAsyncWithHttpInfo (CodiceFiscaleValidatorRequest codicefiscale, string xAuthorization)
        {
            // verify the required parameter 'codicefiscale' is set
            if (codicefiscale == null)
                throw new ApiException(400, "Missing required parameter 'codicefiscale' when calling AnagraficheApi->ValidaCodiceFiscale");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->ValidaCodiceFiscale");

            var localVarPath = "/api/v2/contratti/anagrafiche/codicefiscale/valida";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codicefiscale != null && codicefiscale.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(codicefiscale); // http body (model) parameter
            }
            else
            {
                localVarPostBody = codicefiscale; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidaCodiceFiscale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Valida una partita iva Valida una partita iva prima a livello comunitario e poi a livello formale
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitaiva">Partita iva</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>PartitaIvaValidatorResponse</returns>
        public PartitaIvaValidatorResponse ValidaPartitaIva (PartitaIvaValidatorRequest partitaiva, string xAuthorization)
        {
             ApiResponse<PartitaIvaValidatorResponse> localVarResponse = ValidaPartitaIvaWithHttpInfo(partitaiva, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Valida una partita iva Valida una partita iva prima a livello comunitario e poi a livello formale
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitaiva">Partita iva</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of PartitaIvaValidatorResponse</returns>
        public ApiResponse< PartitaIvaValidatorResponse > ValidaPartitaIvaWithHttpInfo (PartitaIvaValidatorRequest partitaiva, string xAuthorization)
        {
            // verify the required parameter 'partitaiva' is set
            if (partitaiva == null)
                throw new ApiException(400, "Missing required parameter 'partitaiva' when calling AnagraficheApi->ValidaPartitaIva");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->ValidaPartitaIva");

            var localVarPath = "/api/v2/contratti/anagrafiche/partitaiva/valida";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (partitaiva != null && partitaiva.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(partitaiva); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partitaiva; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidaPartitaIva", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PartitaIvaValidatorResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PartitaIvaValidatorResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PartitaIvaValidatorResponse)));
        }

        /// <summary>
        /// Valida una partita iva Valida una partita iva prima a livello comunitario e poi a livello formale
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitaiva">Partita iva</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of PartitaIvaValidatorResponse</returns>
        public async System.Threading.Tasks.Task<PartitaIvaValidatorResponse> ValidaPartitaIvaAsync (PartitaIvaValidatorRequest partitaiva, string xAuthorization)
        {
             ApiResponse<PartitaIvaValidatorResponse> localVarResponse = await ValidaPartitaIvaAsyncWithHttpInfo(partitaiva, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Valida una partita iva Valida una partita iva prima a livello comunitario e poi a livello formale
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitaiva">Partita iva</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (PartitaIvaValidatorResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PartitaIvaValidatorResponse>> ValidaPartitaIvaAsyncWithHttpInfo (PartitaIvaValidatorRequest partitaiva, string xAuthorization)
        {
            // verify the required parameter 'partitaiva' is set
            if (partitaiva == null)
                throw new ApiException(400, "Missing required parameter 'partitaiva' when calling AnagraficheApi->ValidaPartitaIva");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheApi->ValidaPartitaIva");

            var localVarPath = "/api/v2/contratti/anagrafiche/partitaiva/valida";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (partitaiva != null && partitaiva.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(partitaiva); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partitaiva; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidaPartitaIva", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PartitaIvaValidatorResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PartitaIvaValidatorResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PartitaIvaValidatorResponse)));
        }

    }
}
