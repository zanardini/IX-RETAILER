/* 
 * Contratti API V2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnagraficheContrattiApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Recupera i contratti disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="identificativoDistributore">Identificativo distributore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="stato">Stato del contratto (optional)</param>
        /// <param name="filter">Filtro di ricerca (optional)</param>
        /// <param name="skip">Numero di record da saltare (optional)</param>
        /// <param name="take">Numero di record da recuperare (optional)</param>
        /// <param name="sortedBy">Ordina per (Descrizione) (optional)</param>
        /// <param name="sortDirection">Direzione di ordinamento (asc, desc) (optional)</param>
        /// <returns>ElencoContrattiResponse</returns>
        ElencoContrattiResponse ElencoContratti (Guid? identificativoRivenditore, Guid? identificativoDistributore, string xAuthorization, string stato = null, string filter = null, int? skip = null, int? take = null, string sortedBy = null, string sortDirection = null);

        /// <summary>
        /// Recupera i contratti disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="identificativoDistributore">Identificativo distributore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="stato">Stato del contratto (optional)</param>
        /// <param name="filter">Filtro di ricerca (optional)</param>
        /// <param name="skip">Numero di record da saltare (optional)</param>
        /// <param name="take">Numero di record da recuperare (optional)</param>
        /// <param name="sortedBy">Ordina per (Descrizione) (optional)</param>
        /// <param name="sortDirection">Direzione di ordinamento (asc, desc) (optional)</param>
        /// <returns>ApiResponse of ElencoContrattiResponse</returns>
        ApiResponse<ElencoContrattiResponse> ElencoContrattiWithHttpInfo (Guid? identificativoRivenditore, Guid? identificativoDistributore, string xAuthorization, string stato = null, string filter = null, int? skip = null, int? take = null, string sortedBy = null, string sortDirection = null);
        /// <summary>
        /// Recupera i clienti del rivenditore e distributore
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore"></param>
        /// <param name="identificativoDistributore"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ClientiResponseV2</returns>
        ClientiResponseV2 GetClienti (Guid? identificativoRivenditore, Guid? identificativoDistributore, string xAuthorization);

        /// <summary>
        /// Recupera i clienti del rivenditore e distributore
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore"></param>
        /// <param name="identificativoDistributore"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ClientiResponseV2</returns>
        ApiResponse<ClientiResponseV2> GetClientiWithHttpInfo (Guid? identificativoRivenditore, Guid? identificativoDistributore, string xAuthorization);
        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto cliente standard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>FasceIxCeResponse</returns>
        FasceIxCeResponse GetFasceIxCeContrattoClienteFinale (string tipoFascia, string xAuthorization);

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto cliente standard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of FasceIxCeResponse</returns>
        ApiResponse<FasceIxCeResponse> GetFasceIxCeContrattoClienteFinaleWithHttpInfo (string tipoFascia, string xAuthorization);
        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXFE e contratto cliente standard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>FasceIxResponse</returns>
        FasceIxResponse GetFasceIxFeContrattoClienteFinale (string xAuthorization);

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXFE e contratto cliente standard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of FasceIxResponse</returns>
        ApiResponse<FasceIxResponse> GetFasceIxFeContrattoClienteFinaleWithHttpInfo (string xAuthorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Recupera i contratti disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="identificativoDistributore">Identificativo distributore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="stato">Stato del contratto (optional)</param>
        /// <param name="filter">Filtro di ricerca (optional)</param>
        /// <param name="skip">Numero di record da saltare (optional)</param>
        /// <param name="take">Numero di record da recuperare (optional)</param>
        /// <param name="sortedBy">Ordina per (Descrizione) (optional)</param>
        /// <param name="sortDirection">Direzione di ordinamento (asc, desc) (optional)</param>
        /// <returns>Task of ElencoContrattiResponse</returns>
        System.Threading.Tasks.Task<ElencoContrattiResponse> ElencoContrattiAsync (Guid? identificativoRivenditore, Guid? identificativoDistributore, string xAuthorization, string stato = null, string filter = null, int? skip = null, int? take = null, string sortedBy = null, string sortDirection = null);

        /// <summary>
        /// Recupera i contratti disponibili
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="identificativoDistributore">Identificativo distributore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="stato">Stato del contratto (optional)</param>
        /// <param name="filter">Filtro di ricerca (optional)</param>
        /// <param name="skip">Numero di record da saltare (optional)</param>
        /// <param name="take">Numero di record da recuperare (optional)</param>
        /// <param name="sortedBy">Ordina per (Descrizione) (optional)</param>
        /// <param name="sortDirection">Direzione di ordinamento (asc, desc) (optional)</param>
        /// <returns>Task of ApiResponse (ElencoContrattiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElencoContrattiResponse>> ElencoContrattiAsyncWithHttpInfo (Guid? identificativoRivenditore, Guid? identificativoDistributore, string xAuthorization, string stato = null, string filter = null, int? skip = null, int? take = null, string sortedBy = null, string sortDirection = null);
        /// <summary>
        /// Recupera i clienti del rivenditore e distributore
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore"></param>
        /// <param name="identificativoDistributore"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ClientiResponseV2</returns>
        System.Threading.Tasks.Task<ClientiResponseV2> GetClientiAsync (Guid? identificativoRivenditore, Guid? identificativoDistributore, string xAuthorization);

        /// <summary>
        /// Recupera i clienti del rivenditore e distributore
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore"></param>
        /// <param name="identificativoDistributore"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ClientiResponseV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientiResponseV2>> GetClientiAsyncWithHttpInfo (Guid? identificativoRivenditore, Guid? identificativoDistributore, string xAuthorization);
        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto cliente standard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of FasceIxCeResponse</returns>
        System.Threading.Tasks.Task<FasceIxCeResponse> GetFasceIxCeContrattoClienteFinaleAsync (string tipoFascia, string xAuthorization);

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto cliente standard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (FasceIxCeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FasceIxCeResponse>> GetFasceIxCeContrattoClienteFinaleAsyncWithHttpInfo (string tipoFascia, string xAuthorization);
        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXFE e contratto cliente standard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of FasceIxResponse</returns>
        System.Threading.Tasks.Task<FasceIxResponse> GetFasceIxFeContrattoClienteFinaleAsync (string xAuthorization);

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXFE e contratto cliente standard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (FasceIxResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FasceIxResponse>> GetFasceIxFeContrattoClienteFinaleAsyncWithHttpInfo (string xAuthorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnagraficheContrattiApi : IAnagraficheContrattiApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnagraficheContrattiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnagraficheContrattiApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnagraficheContrattiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnagraficheContrattiApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Recupera i contratti disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="identificativoDistributore">Identificativo distributore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="stato">Stato del contratto (optional)</param>
        /// <param name="filter">Filtro di ricerca (optional)</param>
        /// <param name="skip">Numero di record da saltare (optional)</param>
        /// <param name="take">Numero di record da recuperare (optional)</param>
        /// <param name="sortedBy">Ordina per (Descrizione) (optional)</param>
        /// <param name="sortDirection">Direzione di ordinamento (asc, desc) (optional)</param>
        /// <returns>ElencoContrattiResponse</returns>
        public ElencoContrattiResponse ElencoContratti (Guid? identificativoRivenditore, Guid? identificativoDistributore, string xAuthorization, string stato = null, string filter = null, int? skip = null, int? take = null, string sortedBy = null, string sortDirection = null)
        {
             ApiResponse<ElencoContrattiResponse> localVarResponse = ElencoContrattiWithHttpInfo(identificativoRivenditore, identificativoDistributore, xAuthorization, stato, filter, skip, take, sortedBy, sortDirection);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i contratti disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="identificativoDistributore">Identificativo distributore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="stato">Stato del contratto (optional)</param>
        /// <param name="filter">Filtro di ricerca (optional)</param>
        /// <param name="skip">Numero di record da saltare (optional)</param>
        /// <param name="take">Numero di record da recuperare (optional)</param>
        /// <param name="sortedBy">Ordina per (Descrizione) (optional)</param>
        /// <param name="sortDirection">Direzione di ordinamento (asc, desc) (optional)</param>
        /// <returns>ApiResponse of ElencoContrattiResponse</returns>
        public ApiResponse< ElencoContrattiResponse > ElencoContrattiWithHttpInfo (Guid? identificativoRivenditore, Guid? identificativoDistributore, string xAuthorization, string stato = null, string filter = null, int? skip = null, int? take = null, string sortedBy = null, string sortDirection = null)
        {
            // verify the required parameter 'identificativoRivenditore' is set
            if (identificativoRivenditore == null)
                throw new ApiException(400, "Missing required parameter 'identificativoRivenditore' when calling AnagraficheContrattiApi->ElencoContratti");
            // verify the required parameter 'identificativoDistributore' is set
            if (identificativoDistributore == null)
                throw new ApiException(400, "Missing required parameter 'identificativoDistributore' when calling AnagraficheContrattiApi->ElencoContratti");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheContrattiApi->ElencoContratti");

            var localVarPath = "/api/v2/contratti/rivenditori/{identificativoRivenditore}/distributori/{identificativoDistributore}/contratti";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identificativoRivenditore != null) localVarPathParams.Add("identificativoRivenditore", this.Configuration.ApiClient.ParameterToString(identificativoRivenditore)); // path parameter
            if (identificativoDistributore != null) localVarPathParams.Add("identificativoDistributore", this.Configuration.ApiClient.ParameterToString(identificativoDistributore)); // path parameter
            if (stato != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stato", stato)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (sortedBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortedBy", sortedBy)); // query parameter
            if (sortDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortDirection", sortDirection)); // query parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElencoContratti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElencoContrattiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElencoContrattiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElencoContrattiResponse)));
        }

        /// <summary>
        /// Recupera i contratti disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="identificativoDistributore">Identificativo distributore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="stato">Stato del contratto (optional)</param>
        /// <param name="filter">Filtro di ricerca (optional)</param>
        /// <param name="skip">Numero di record da saltare (optional)</param>
        /// <param name="take">Numero di record da recuperare (optional)</param>
        /// <param name="sortedBy">Ordina per (Descrizione) (optional)</param>
        /// <param name="sortDirection">Direzione di ordinamento (asc, desc) (optional)</param>
        /// <returns>Task of ElencoContrattiResponse</returns>
        public async System.Threading.Tasks.Task<ElencoContrattiResponse> ElencoContrattiAsync (Guid? identificativoRivenditore, Guid? identificativoDistributore, string xAuthorization, string stato = null, string filter = null, int? skip = null, int? take = null, string sortedBy = null, string sortDirection = null)
        {
             ApiResponse<ElencoContrattiResponse> localVarResponse = await ElencoContrattiAsyncWithHttpInfo(identificativoRivenditore, identificativoDistributore, xAuthorization, stato, filter, skip, take, sortedBy, sortDirection);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i contratti disponibili 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore">Identificativo rivenditore</param>
        /// <param name="identificativoDistributore">Identificativo distributore</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="stato">Stato del contratto (optional)</param>
        /// <param name="filter">Filtro di ricerca (optional)</param>
        /// <param name="skip">Numero di record da saltare (optional)</param>
        /// <param name="take">Numero di record da recuperare (optional)</param>
        /// <param name="sortedBy">Ordina per (Descrizione) (optional)</param>
        /// <param name="sortDirection">Direzione di ordinamento (asc, desc) (optional)</param>
        /// <returns>Task of ApiResponse (ElencoContrattiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ElencoContrattiResponse>> ElencoContrattiAsyncWithHttpInfo (Guid? identificativoRivenditore, Guid? identificativoDistributore, string xAuthorization, string stato = null, string filter = null, int? skip = null, int? take = null, string sortedBy = null, string sortDirection = null)
        {
            // verify the required parameter 'identificativoRivenditore' is set
            if (identificativoRivenditore == null)
                throw new ApiException(400, "Missing required parameter 'identificativoRivenditore' when calling AnagraficheContrattiApi->ElencoContratti");
            // verify the required parameter 'identificativoDistributore' is set
            if (identificativoDistributore == null)
                throw new ApiException(400, "Missing required parameter 'identificativoDistributore' when calling AnagraficheContrattiApi->ElencoContratti");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheContrattiApi->ElencoContratti");

            var localVarPath = "/api/v2/contratti/rivenditori/{identificativoRivenditore}/distributori/{identificativoDistributore}/contratti";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identificativoRivenditore != null) localVarPathParams.Add("identificativoRivenditore", this.Configuration.ApiClient.ParameterToString(identificativoRivenditore)); // path parameter
            if (identificativoDistributore != null) localVarPathParams.Add("identificativoDistributore", this.Configuration.ApiClient.ParameterToString(identificativoDistributore)); // path parameter
            if (stato != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stato", stato)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (sortedBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortedBy", sortedBy)); // query parameter
            if (sortDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortDirection", sortDirection)); // query parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElencoContratti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElencoContrattiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElencoContrattiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElencoContrattiResponse)));
        }

        /// <summary>
        /// Recupera i clienti del rivenditore e distributore 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore"></param>
        /// <param name="identificativoDistributore"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ClientiResponseV2</returns>
        public ClientiResponseV2 GetClienti (Guid? identificativoRivenditore, Guid? identificativoDistributore, string xAuthorization)
        {
             ApiResponse<ClientiResponseV2> localVarResponse = GetClientiWithHttpInfo(identificativoRivenditore, identificativoDistributore, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i clienti del rivenditore e distributore 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore"></param>
        /// <param name="identificativoDistributore"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ClientiResponseV2</returns>
        public ApiResponse< ClientiResponseV2 > GetClientiWithHttpInfo (Guid? identificativoRivenditore, Guid? identificativoDistributore, string xAuthorization)
        {
            // verify the required parameter 'identificativoRivenditore' is set
            if (identificativoRivenditore == null)
                throw new ApiException(400, "Missing required parameter 'identificativoRivenditore' when calling AnagraficheContrattiApi->GetClienti");
            // verify the required parameter 'identificativoDistributore' is set
            if (identificativoDistributore == null)
                throw new ApiException(400, "Missing required parameter 'identificativoDistributore' when calling AnagraficheContrattiApi->GetClienti");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheContrattiApi->GetClienti");

            var localVarPath = "/api/v2/contratti/rivenditori/{identificativoRivenditore}/distributori/{identificativoDistributore}/clienti";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identificativoRivenditore != null) localVarPathParams.Add("identificativoRivenditore", this.Configuration.ApiClient.ParameterToString(identificativoRivenditore)); // path parameter
            if (identificativoDistributore != null) localVarPathParams.Add("identificativoDistributore", this.Configuration.ApiClient.ParameterToString(identificativoDistributore)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClienti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientiResponseV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientiResponseV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientiResponseV2)));
        }

        /// <summary>
        /// Recupera i clienti del rivenditore e distributore 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore"></param>
        /// <param name="identificativoDistributore"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ClientiResponseV2</returns>
        public async System.Threading.Tasks.Task<ClientiResponseV2> GetClientiAsync (Guid? identificativoRivenditore, Guid? identificativoDistributore, string xAuthorization)
        {
             ApiResponse<ClientiResponseV2> localVarResponse = await GetClientiAsyncWithHttpInfo(identificativoRivenditore, identificativoDistributore, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i clienti del rivenditore e distributore 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificativoRivenditore"></param>
        /// <param name="identificativoDistributore"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ClientiResponseV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientiResponseV2>> GetClientiAsyncWithHttpInfo (Guid? identificativoRivenditore, Guid? identificativoDistributore, string xAuthorization)
        {
            // verify the required parameter 'identificativoRivenditore' is set
            if (identificativoRivenditore == null)
                throw new ApiException(400, "Missing required parameter 'identificativoRivenditore' when calling AnagraficheContrattiApi->GetClienti");
            // verify the required parameter 'identificativoDistributore' is set
            if (identificativoDistributore == null)
                throw new ApiException(400, "Missing required parameter 'identificativoDistributore' when calling AnagraficheContrattiApi->GetClienti");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheContrattiApi->GetClienti");

            var localVarPath = "/api/v2/contratti/rivenditori/{identificativoRivenditore}/distributori/{identificativoDistributore}/clienti";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identificativoRivenditore != null) localVarPathParams.Add("identificativoRivenditore", this.Configuration.ApiClient.ParameterToString(identificativoRivenditore)); // path parameter
            if (identificativoDistributore != null) localVarPathParams.Add("identificativoDistributore", this.Configuration.ApiClient.ParameterToString(identificativoDistributore)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClienti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientiResponseV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientiResponseV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientiResponseV2)));
        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto cliente standard 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>FasceIxCeResponse</returns>
        public FasceIxCeResponse GetFasceIxCeContrattoClienteFinale (string tipoFascia, string xAuthorization)
        {
             ApiResponse<FasceIxCeResponse> localVarResponse = GetFasceIxCeContrattoClienteFinaleWithHttpInfo(tipoFascia, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto cliente standard 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of FasceIxCeResponse</returns>
        public ApiResponse< FasceIxCeResponse > GetFasceIxCeContrattoClienteFinaleWithHttpInfo (string tipoFascia, string xAuthorization)
        {
            // verify the required parameter 'tipoFascia' is set
            if (tipoFascia == null)
                throw new ApiException(400, "Missing required parameter 'tipoFascia' when calling AnagraficheContrattiApi->GetFasceIxCeContrattoClienteFinale");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheContrattiApi->GetFasceIxCeContrattoClienteFinale");

            var localVarPath = "/api/v2/contratti/clientestandard/fasceixce/{tipoFascia}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoFascia != null) localVarPathParams.Add("tipoFascia", this.Configuration.ApiClient.ParameterToString(tipoFascia)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFasceIxCeContrattoClienteFinale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FasceIxCeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FasceIxCeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FasceIxCeResponse)));
        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto cliente standard 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of FasceIxCeResponse</returns>
        public async System.Threading.Tasks.Task<FasceIxCeResponse> GetFasceIxCeContrattoClienteFinaleAsync (string tipoFascia, string xAuthorization)
        {
             ApiResponse<FasceIxCeResponse> localVarResponse = await GetFasceIxCeContrattoClienteFinaleAsyncWithHttpInfo(tipoFascia, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXCE e contratto cliente standard 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoFascia"></param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (FasceIxCeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FasceIxCeResponse>> GetFasceIxCeContrattoClienteFinaleAsyncWithHttpInfo (string tipoFascia, string xAuthorization)
        {
            // verify the required parameter 'tipoFascia' is set
            if (tipoFascia == null)
                throw new ApiException(400, "Missing required parameter 'tipoFascia' when calling AnagraficheContrattiApi->GetFasceIxCeContrattoClienteFinale");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheContrattiApi->GetFasceIxCeContrattoClienteFinale");

            var localVarPath = "/api/v2/contratti/clientestandard/fasceixce/{tipoFascia}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoFascia != null) localVarPathParams.Add("tipoFascia", this.Configuration.ApiClient.ParameterToString(tipoFascia)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFasceIxCeContrattoClienteFinale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FasceIxCeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FasceIxCeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FasceIxCeResponse)));
        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXFE e contratto cliente standard 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>FasceIxResponse</returns>
        public FasceIxResponse GetFasceIxFeContrattoClienteFinale (string xAuthorization)
        {
             ApiResponse<FasceIxResponse> localVarResponse = GetFasceIxFeContrattoClienteFinaleWithHttpInfo(xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXFE e contratto cliente standard 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of FasceIxResponse</returns>
        public ApiResponse< FasceIxResponse > GetFasceIxFeContrattoClienteFinaleWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheContrattiApi->GetFasceIxFeContrattoClienteFinale");

            var localVarPath = "/api/v2/contratti/clientestandard/fasceixfe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFasceIxFeContrattoClienteFinale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FasceIxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FasceIxResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FasceIxResponse)));
        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXFE e contratto cliente standard 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of FasceIxResponse</returns>
        public async System.Threading.Tasks.Task<FasceIxResponse> GetFasceIxFeContrattoClienteFinaleAsync (string xAuthorization)
        {
             ApiResponse<FasceIxResponse> localVarResponse = await GetFasceIxFeContrattoClienteFinaleAsyncWithHttpInfo(xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera le fasce disponibili per il modulo IXFE e contratto cliente standard 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (FasceIxResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FasceIxResponse>> GetFasceIxFeContrattoClienteFinaleAsyncWithHttpInfo (string xAuthorization)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AnagraficheContrattiApi->GetFasceIxFeContrattoClienteFinale");

            var localVarPath = "/api/v2/contratti/clientestandard/fasceixfe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFasceIxFeContrattoClienteFinale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FasceIxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FasceIxResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FasceIxResponse)));
        }

    }
}
