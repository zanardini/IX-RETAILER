/* 
 * Contratti API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAoosApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Rimuove una aoo da un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        void DeleteAoo (string id, string idAoo, string xAuthorization);

        /// <summary>
        /// Rimuove una aoo da un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAooWithHttpInfo (string id, string idAoo, string xAuthorization);
        /// <summary>
        /// Recupera una aoo di un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ContrattoAoo</returns>
        ContrattoAoo GetAoo (string id, string idAoo, string xAuthorization);

        /// <summary>
        /// Recupera una aoo di un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ContrattoAoo</returns>
        ApiResponse<ContrattoAoo> GetAooWithHttpInfo (string id, string idAoo, string xAuthorization);
        /// <summary>
        /// Recupera le aoos di un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>AoosResponse</returns>
        AoosResponse GetAoos (string id, string xAuthorization);

        /// <summary>
        /// Recupera le aoos di un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of AoosResponse</returns>
        ApiResponse<AoosResponse> GetAoosWithHttpInfo (string id, string xAuthorization);
        /// <summary>
        /// Recupera i moduli di una aoo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>AooModuliResponse</returns>
        AooModuliResponse GetModuli (string id, string idAoo, string xAuthorization);

        /// <summary>
        /// Recupera i moduli di una aoo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of AooModuliResponse</returns>
        ApiResponse<AooModuliResponse> GetModuliWithHttpInfo (string id, string idAoo, string xAuthorization);
        /// <summary>
        /// Restituisce il modulo IXCE di una aoo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>AooModuloIxCeResponse</returns>
        AooModuloIxCeResponse GetModuloIxCe (string id, string idAoo, string xAuthorization);

        /// <summary>
        /// Restituisce il modulo IXCE di una aoo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of AooModuloIxCeResponse</returns>
        ApiResponse<AooModuloIxCeResponse> GetModuloIxCeWithHttpInfo (string id, string idAoo, string xAuthorization);
        /// <summary>
        /// Aggiunge una aoo a un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// Se viene passato l&#39;identificativo cliente significa che i dati dell&#39;Aoo coincidono con quelli del cliente inserito.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome dell&#39;aoo              in base al risultato della validazione
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="aoo">Aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>AooResponse</returns>
        AooResponse InsertAoo (string id, CreateAooRequest aoo, string xAuthorization);

        /// <summary>
        /// Aggiunge una aoo a un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// Se viene passato l&#39;identificativo cliente significa che i dati dell&#39;Aoo coincidono con quelli del cliente inserito.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome dell&#39;aoo              in base al risultato della validazione
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="aoo">Aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of AooResponse</returns>
        ApiResponse<AooResponse> InsertAooWithHttpInfo (string id, CreateAooRequest aoo, string xAuthorization);
        /// <summary>
        /// Aggiunge a una aoo il modulo IxCe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="modulo">Modulo IxCe</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        void InsertModuloIxCeAoo (string id, string idAoo, AooModuloIxCeRequest modulo, string xAuthorization);

        /// <summary>
        /// Aggiunge a una aoo il modulo IxCe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="modulo">Modulo IxCe</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InsertModuloIxCeAooWithHttpInfo (string id, string idAoo, AooModuloIxCeRequest modulo, string xAuthorization);
        /// <summary>
        /// Modifica una aoo di un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// Se viene passato l&#39;identificativo cliente significa che i dati dell&#39;Aoo coincidono con quelli del cliente inserito.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome dell&#39;aoo              in base al risultato della validazione
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="aoo">Aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>AooResponse</returns>
        AooResponse UpdateAoo (string id, string idAoo, UpdateAooRequest aoo, string xAuthorization);

        /// <summary>
        /// Modifica una aoo di un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// Se viene passato l&#39;identificativo cliente significa che i dati dell&#39;Aoo coincidono con quelli del cliente inserito.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome dell&#39;aoo              in base al risultato della validazione
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="aoo">Aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of AooResponse</returns>
        ApiResponse<AooResponse> UpdateAooWithHttpInfo (string id, string idAoo, UpdateAooRequest aoo, string xAuthorization);
        /// <summary>
        /// Modifica la ragione sociale dell&#39;aoo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="ragioneSociale">Ragione sociale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        void UpdateRagioneSocialeAoo (string id, string idAoo, UpdateRagioneSocialeAooRequest ragioneSociale, string xAuthorization);

        /// <summary>
        /// Modifica la ragione sociale dell&#39;aoo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="ragioneSociale">Ragione sociale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRagioneSocialeAooWithHttpInfo (string id, string idAoo, UpdateRagioneSocialeAooRequest ragioneSociale, string xAuthorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Rimuove una aoo da un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAooAsync (string id, string idAoo, string xAuthorization);

        /// <summary>
        /// Rimuove una aoo da un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAooAsyncWithHttpInfo (string id, string idAoo, string xAuthorization);
        /// <summary>
        /// Recupera una aoo di un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ContrattoAoo</returns>
        System.Threading.Tasks.Task<ContrattoAoo> GetAooAsync (string id, string idAoo, string xAuthorization);

        /// <summary>
        /// Recupera una aoo di un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ContrattoAoo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContrattoAoo>> GetAooAsyncWithHttpInfo (string id, string idAoo, string xAuthorization);
        /// <summary>
        /// Recupera le aoos di un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of AoosResponse</returns>
        System.Threading.Tasks.Task<AoosResponse> GetAoosAsync (string id, string xAuthorization);

        /// <summary>
        /// Recupera le aoos di un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (AoosResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AoosResponse>> GetAoosAsyncWithHttpInfo (string id, string xAuthorization);
        /// <summary>
        /// Recupera i moduli di una aoo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of AooModuliResponse</returns>
        System.Threading.Tasks.Task<AooModuliResponse> GetModuliAsync (string id, string idAoo, string xAuthorization);

        /// <summary>
        /// Recupera i moduli di una aoo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (AooModuliResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AooModuliResponse>> GetModuliAsyncWithHttpInfo (string id, string idAoo, string xAuthorization);
        /// <summary>
        /// Restituisce il modulo IXCE di una aoo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of AooModuloIxCeResponse</returns>
        System.Threading.Tasks.Task<AooModuloIxCeResponse> GetModuloIxCeAsync (string id, string idAoo, string xAuthorization);

        /// <summary>
        /// Restituisce il modulo IXCE di una aoo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (AooModuloIxCeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AooModuloIxCeResponse>> GetModuloIxCeAsyncWithHttpInfo (string id, string idAoo, string xAuthorization);
        /// <summary>
        /// Aggiunge una aoo a un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// Se viene passato l&#39;identificativo cliente significa che i dati dell&#39;Aoo coincidono con quelli del cliente inserito.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome dell&#39;aoo              in base al risultato della validazione
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="aoo">Aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of AooResponse</returns>
        System.Threading.Tasks.Task<AooResponse> InsertAooAsync (string id, CreateAooRequest aoo, string xAuthorization);

        /// <summary>
        /// Aggiunge una aoo a un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// Se viene passato l&#39;identificativo cliente significa che i dati dell&#39;Aoo coincidono con quelli del cliente inserito.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome dell&#39;aoo              in base al risultato della validazione
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="aoo">Aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (AooResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AooResponse>> InsertAooAsyncWithHttpInfo (string id, CreateAooRequest aoo, string xAuthorization);
        /// <summary>
        /// Aggiunge a una aoo il modulo IxCe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="modulo">Modulo IxCe</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InsertModuloIxCeAooAsync (string id, string idAoo, AooModuloIxCeRequest modulo, string xAuthorization);

        /// <summary>
        /// Aggiunge a una aoo il modulo IxCe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="modulo">Modulo IxCe</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InsertModuloIxCeAooAsyncWithHttpInfo (string id, string idAoo, AooModuloIxCeRequest modulo, string xAuthorization);
        /// <summary>
        /// Modifica una aoo di un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// Se viene passato l&#39;identificativo cliente significa che i dati dell&#39;Aoo coincidono con quelli del cliente inserito.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome dell&#39;aoo              in base al risultato della validazione
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="aoo">Aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of AooResponse</returns>
        System.Threading.Tasks.Task<AooResponse> UpdateAooAsync (string id, string idAoo, UpdateAooRequest aoo, string xAuthorization);

        /// <summary>
        /// Modifica una aoo di un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// Se viene passato l&#39;identificativo cliente significa che i dati dell&#39;Aoo coincidono con quelli del cliente inserito.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome dell&#39;aoo              in base al risultato della validazione
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="aoo">Aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (AooResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AooResponse>> UpdateAooAsyncWithHttpInfo (string id, string idAoo, UpdateAooRequest aoo, string xAuthorization);
        /// <summary>
        /// Modifica la ragione sociale dell&#39;aoo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="ragioneSociale">Ragione sociale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRagioneSocialeAooAsync (string id, string idAoo, UpdateRagioneSocialeAooRequest ragioneSociale, string xAuthorization);

        /// <summary>
        /// Modifica la ragione sociale dell&#39;aoo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="ragioneSociale">Ragione sociale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRagioneSocialeAooAsyncWithHttpInfo (string id, string idAoo, UpdateRagioneSocialeAooRequest ragioneSociale, string xAuthorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AoosApi : IAoosApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AoosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AoosApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AoosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AoosApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Rimuove una aoo da un contratto cliente finale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        public void DeleteAoo (string id, string idAoo, string xAuthorization)
        {
             DeleteAooWithHttpInfo(id, idAoo, xAuthorization);
        }

        /// <summary>
        /// Rimuove una aoo da un contratto cliente finale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAooWithHttpInfo (string id, string idAoo, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->DeleteAoo");
            // verify the required parameter 'idAoo' is set
            if (idAoo == null)
                throw new ApiException(400, "Missing required parameter 'idAoo' when calling AoosApi->DeleteAoo");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->DeleteAoo");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos/{idAoo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idAoo != null) localVarPathParams.Add("idAoo", this.Configuration.ApiClient.ParameterToString(idAoo)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAoo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Rimuove una aoo da un contratto cliente finale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAooAsync (string id, string idAoo, string xAuthorization)
        {
             await DeleteAooAsyncWithHttpInfo(id, idAoo, xAuthorization);

        }

        /// <summary>
        /// Rimuove una aoo da un contratto cliente finale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAooAsyncWithHttpInfo (string id, string idAoo, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->DeleteAoo");
            // verify the required parameter 'idAoo' is set
            if (idAoo == null)
                throw new ApiException(400, "Missing required parameter 'idAoo' when calling AoosApi->DeleteAoo");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->DeleteAoo");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos/{idAoo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idAoo != null) localVarPathParams.Add("idAoo", this.Configuration.ApiClient.ParameterToString(idAoo)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAoo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Recupera una aoo di un contratto cliente finale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ContrattoAoo</returns>
        public ContrattoAoo GetAoo (string id, string idAoo, string xAuthorization)
        {
             ApiResponse<ContrattoAoo> localVarResponse = GetAooWithHttpInfo(id, idAoo, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera una aoo di un contratto cliente finale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ContrattoAoo</returns>
        public ApiResponse< ContrattoAoo > GetAooWithHttpInfo (string id, string idAoo, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->GetAoo");
            // verify the required parameter 'idAoo' is set
            if (idAoo == null)
                throw new ApiException(400, "Missing required parameter 'idAoo' when calling AoosApi->GetAoo");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->GetAoo");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos/{idAoo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idAoo != null) localVarPathParams.Add("idAoo", this.Configuration.ApiClient.ParameterToString(idAoo)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAoo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContrattoAoo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContrattoAoo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContrattoAoo)));
        }

        /// <summary>
        /// Recupera una aoo di un contratto cliente finale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ContrattoAoo</returns>
        public async System.Threading.Tasks.Task<ContrattoAoo> GetAooAsync (string id, string idAoo, string xAuthorization)
        {
             ApiResponse<ContrattoAoo> localVarResponse = await GetAooAsyncWithHttpInfo(id, idAoo, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera una aoo di un contratto cliente finale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ContrattoAoo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContrattoAoo>> GetAooAsyncWithHttpInfo (string id, string idAoo, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->GetAoo");
            // verify the required parameter 'idAoo' is set
            if (idAoo == null)
                throw new ApiException(400, "Missing required parameter 'idAoo' when calling AoosApi->GetAoo");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->GetAoo");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos/{idAoo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idAoo != null) localVarPathParams.Add("idAoo", this.Configuration.ApiClient.ParameterToString(idAoo)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAoo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContrattoAoo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContrattoAoo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContrattoAoo)));
        }

        /// <summary>
        /// Recupera le aoos di un contratto cliente finale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>AoosResponse</returns>
        public AoosResponse GetAoos (string id, string xAuthorization)
        {
             ApiResponse<AoosResponse> localVarResponse = GetAoosWithHttpInfo(id, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera le aoos di un contratto cliente finale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of AoosResponse</returns>
        public ApiResponse< AoosResponse > GetAoosWithHttpInfo (string id, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->GetAoos");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->GetAoos");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAoos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AoosResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AoosResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AoosResponse)));
        }

        /// <summary>
        /// Recupera le aoos di un contratto cliente finale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of AoosResponse</returns>
        public async System.Threading.Tasks.Task<AoosResponse> GetAoosAsync (string id, string xAuthorization)
        {
             ApiResponse<AoosResponse> localVarResponse = await GetAoosAsyncWithHttpInfo(id, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera le aoos di un contratto cliente finale 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (AoosResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AoosResponse>> GetAoosAsyncWithHttpInfo (string id, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->GetAoos");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->GetAoos");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAoos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AoosResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AoosResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AoosResponse)));
        }

        /// <summary>
        /// Recupera i moduli di una aoo 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>AooModuliResponse</returns>
        public AooModuliResponse GetModuli (string id, string idAoo, string xAuthorization)
        {
             ApiResponse<AooModuliResponse> localVarResponse = GetModuliWithHttpInfo(id, idAoo, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i moduli di una aoo 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of AooModuliResponse</returns>
        public ApiResponse< AooModuliResponse > GetModuliWithHttpInfo (string id, string idAoo, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->GetModuli");
            // verify the required parameter 'idAoo' is set
            if (idAoo == null)
                throw new ApiException(400, "Missing required parameter 'idAoo' when calling AoosApi->GetModuli");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->GetModuli");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos/{idAoo}/moduli";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idAoo != null) localVarPathParams.Add("idAoo", this.Configuration.ApiClient.ParameterToString(idAoo)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModuli", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AooModuliResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AooModuliResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AooModuliResponse)));
        }

        /// <summary>
        /// Recupera i moduli di una aoo 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of AooModuliResponse</returns>
        public async System.Threading.Tasks.Task<AooModuliResponse> GetModuliAsync (string id, string idAoo, string xAuthorization)
        {
             ApiResponse<AooModuliResponse> localVarResponse = await GetModuliAsyncWithHttpInfo(id, idAoo, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i moduli di una aoo 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (AooModuliResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AooModuliResponse>> GetModuliAsyncWithHttpInfo (string id, string idAoo, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->GetModuli");
            // verify the required parameter 'idAoo' is set
            if (idAoo == null)
                throw new ApiException(400, "Missing required parameter 'idAoo' when calling AoosApi->GetModuli");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->GetModuli");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos/{idAoo}/moduli";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idAoo != null) localVarPathParams.Add("idAoo", this.Configuration.ApiClient.ParameterToString(idAoo)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModuli", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AooModuliResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AooModuliResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AooModuliResponse)));
        }

        /// <summary>
        /// Restituisce il modulo IXCE di una aoo 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>AooModuloIxCeResponse</returns>
        public AooModuloIxCeResponse GetModuloIxCe (string id, string idAoo, string xAuthorization)
        {
             ApiResponse<AooModuloIxCeResponse> localVarResponse = GetModuloIxCeWithHttpInfo(id, idAoo, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Restituisce il modulo IXCE di una aoo 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of AooModuloIxCeResponse</returns>
        public ApiResponse< AooModuloIxCeResponse > GetModuloIxCeWithHttpInfo (string id, string idAoo, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->GetModuloIxCe");
            // verify the required parameter 'idAoo' is set
            if (idAoo == null)
                throw new ApiException(400, "Missing required parameter 'idAoo' when calling AoosApi->GetModuloIxCe");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->GetModuloIxCe");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos/{idAoo}/moduli/ixce";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idAoo != null) localVarPathParams.Add("idAoo", this.Configuration.ApiClient.ParameterToString(idAoo)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModuloIxCe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AooModuloIxCeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AooModuloIxCeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AooModuloIxCeResponse)));
        }

        /// <summary>
        /// Restituisce il modulo IXCE di una aoo 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of AooModuloIxCeResponse</returns>
        public async System.Threading.Tasks.Task<AooModuloIxCeResponse> GetModuloIxCeAsync (string id, string idAoo, string xAuthorization)
        {
             ApiResponse<AooModuloIxCeResponse> localVarResponse = await GetModuloIxCeAsyncWithHttpInfo(id, idAoo, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Restituisce il modulo IXCE di una aoo 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (AooModuloIxCeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AooModuloIxCeResponse>> GetModuloIxCeAsyncWithHttpInfo (string id, string idAoo, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->GetModuloIxCe");
            // verify the required parameter 'idAoo' is set
            if (idAoo == null)
                throw new ApiException(400, "Missing required parameter 'idAoo' when calling AoosApi->GetModuloIxCe");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->GetModuloIxCe");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos/{idAoo}/moduli/ixce";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idAoo != null) localVarPathParams.Add("idAoo", this.Configuration.ApiClient.ParameterToString(idAoo)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModuloIxCe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AooModuloIxCeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AooModuloIxCeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AooModuloIxCeResponse)));
        }

        /// <summary>
        /// Aggiunge una aoo a un contratto cliente finale Se viene passato l&#39;identificativo cliente significa che i dati dell&#39;Aoo coincidono con quelli del cliente inserito.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome dell&#39;aoo              in base al risultato della validazione
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="aoo">Aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>AooResponse</returns>
        public AooResponse InsertAoo (string id, CreateAooRequest aoo, string xAuthorization)
        {
             ApiResponse<AooResponse> localVarResponse = InsertAooWithHttpInfo(id, aoo, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Aggiunge una aoo a un contratto cliente finale Se viene passato l&#39;identificativo cliente significa che i dati dell&#39;Aoo coincidono con quelli del cliente inserito.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome dell&#39;aoo              in base al risultato della validazione
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="aoo">Aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of AooResponse</returns>
        public ApiResponse< AooResponse > InsertAooWithHttpInfo (string id, CreateAooRequest aoo, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->InsertAoo");
            // verify the required parameter 'aoo' is set
            if (aoo == null)
                throw new ApiException(400, "Missing required parameter 'aoo' when calling AoosApi->InsertAoo");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->InsertAoo");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (aoo != null && aoo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aoo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aoo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertAoo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AooResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AooResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AooResponse)));
        }

        /// <summary>
        /// Aggiunge una aoo a un contratto cliente finale Se viene passato l&#39;identificativo cliente significa che i dati dell&#39;Aoo coincidono con quelli del cliente inserito.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome dell&#39;aoo              in base al risultato della validazione
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="aoo">Aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of AooResponse</returns>
        public async System.Threading.Tasks.Task<AooResponse> InsertAooAsync (string id, CreateAooRequest aoo, string xAuthorization)
        {
             ApiResponse<AooResponse> localVarResponse = await InsertAooAsyncWithHttpInfo(id, aoo, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Aggiunge una aoo a un contratto cliente finale Se viene passato l&#39;identificativo cliente significa che i dati dell&#39;Aoo coincidono con quelli del cliente inserito.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome dell&#39;aoo              in base al risultato della validazione
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="aoo">Aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (AooResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AooResponse>> InsertAooAsyncWithHttpInfo (string id, CreateAooRequest aoo, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->InsertAoo");
            // verify the required parameter 'aoo' is set
            if (aoo == null)
                throw new ApiException(400, "Missing required parameter 'aoo' when calling AoosApi->InsertAoo");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->InsertAoo");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (aoo != null && aoo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aoo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aoo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertAoo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AooResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AooResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AooResponse)));
        }

        /// <summary>
        /// Aggiunge a una aoo il modulo IxCe 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="modulo">Modulo IxCe</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        public void InsertModuloIxCeAoo (string id, string idAoo, AooModuloIxCeRequest modulo, string xAuthorization)
        {
             InsertModuloIxCeAooWithHttpInfo(id, idAoo, modulo, xAuthorization);
        }

        /// <summary>
        /// Aggiunge a una aoo il modulo IxCe 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="modulo">Modulo IxCe</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InsertModuloIxCeAooWithHttpInfo (string id, string idAoo, AooModuloIxCeRequest modulo, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->InsertModuloIxCeAoo");
            // verify the required parameter 'idAoo' is set
            if (idAoo == null)
                throw new ApiException(400, "Missing required parameter 'idAoo' when calling AoosApi->InsertModuloIxCeAoo");
            // verify the required parameter 'modulo' is set
            if (modulo == null)
                throw new ApiException(400, "Missing required parameter 'modulo' when calling AoosApi->InsertModuloIxCeAoo");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->InsertModuloIxCeAoo");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos/{idAoo}/moduli/ixce";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idAoo != null) localVarPathParams.Add("idAoo", this.Configuration.ApiClient.ParameterToString(idAoo)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (modulo != null && modulo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modulo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modulo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertModuloIxCeAoo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Aggiunge a una aoo il modulo IxCe 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="modulo">Modulo IxCe</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InsertModuloIxCeAooAsync (string id, string idAoo, AooModuloIxCeRequest modulo, string xAuthorization)
        {
             await InsertModuloIxCeAooAsyncWithHttpInfo(id, idAoo, modulo, xAuthorization);

        }

        /// <summary>
        /// Aggiunge a una aoo il modulo IxCe 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="modulo">Modulo IxCe</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InsertModuloIxCeAooAsyncWithHttpInfo (string id, string idAoo, AooModuloIxCeRequest modulo, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->InsertModuloIxCeAoo");
            // verify the required parameter 'idAoo' is set
            if (idAoo == null)
                throw new ApiException(400, "Missing required parameter 'idAoo' when calling AoosApi->InsertModuloIxCeAoo");
            // verify the required parameter 'modulo' is set
            if (modulo == null)
                throw new ApiException(400, "Missing required parameter 'modulo' when calling AoosApi->InsertModuloIxCeAoo");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->InsertModuloIxCeAoo");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos/{idAoo}/moduli/ixce";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idAoo != null) localVarPathParams.Add("idAoo", this.Configuration.ApiClient.ParameterToString(idAoo)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (modulo != null && modulo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modulo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modulo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertModuloIxCeAoo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Modifica una aoo di un contratto cliente finale Se viene passato l&#39;identificativo cliente significa che i dati dell&#39;Aoo coincidono con quelli del cliente inserito.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome dell&#39;aoo              in base al risultato della validazione
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="aoo">Aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>AooResponse</returns>
        public AooResponse UpdateAoo (string id, string idAoo, UpdateAooRequest aoo, string xAuthorization)
        {
             ApiResponse<AooResponse> localVarResponse = UpdateAooWithHttpInfo(id, idAoo, aoo, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifica una aoo di un contratto cliente finale Se viene passato l&#39;identificativo cliente significa che i dati dell&#39;Aoo coincidono con quelli del cliente inserito.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome dell&#39;aoo              in base al risultato della validazione
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="aoo">Aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of AooResponse</returns>
        public ApiResponse< AooResponse > UpdateAooWithHttpInfo (string id, string idAoo, UpdateAooRequest aoo, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->UpdateAoo");
            // verify the required parameter 'idAoo' is set
            if (idAoo == null)
                throw new ApiException(400, "Missing required parameter 'idAoo' when calling AoosApi->UpdateAoo");
            // verify the required parameter 'aoo' is set
            if (aoo == null)
                throw new ApiException(400, "Missing required parameter 'aoo' when calling AoosApi->UpdateAoo");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->UpdateAoo");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos/{idAoo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idAoo != null) localVarPathParams.Add("idAoo", this.Configuration.ApiClient.ParameterToString(idAoo)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (aoo != null && aoo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aoo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aoo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAoo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AooResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AooResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AooResponse)));
        }

        /// <summary>
        /// Modifica una aoo di un contratto cliente finale Se viene passato l&#39;identificativo cliente significa che i dati dell&#39;Aoo coincidono con quelli del cliente inserito.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome dell&#39;aoo              in base al risultato della validazione
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="aoo">Aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of AooResponse</returns>
        public async System.Threading.Tasks.Task<AooResponse> UpdateAooAsync (string id, string idAoo, UpdateAooRequest aoo, string xAuthorization)
        {
             ApiResponse<AooResponse> localVarResponse = await UpdateAooAsyncWithHttpInfo(id, idAoo, aoo, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifica una aoo di un contratto cliente finale Se viene passato l&#39;identificativo cliente significa che i dati dell&#39;Aoo coincidono con quelli del cliente inserito.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome dell&#39;aoo              in base al risultato della validazione
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="aoo">Aoo</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (AooResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AooResponse>> UpdateAooAsyncWithHttpInfo (string id, string idAoo, UpdateAooRequest aoo, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->UpdateAoo");
            // verify the required parameter 'idAoo' is set
            if (idAoo == null)
                throw new ApiException(400, "Missing required parameter 'idAoo' when calling AoosApi->UpdateAoo");
            // verify the required parameter 'aoo' is set
            if (aoo == null)
                throw new ApiException(400, "Missing required parameter 'aoo' when calling AoosApi->UpdateAoo");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->UpdateAoo");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos/{idAoo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idAoo != null) localVarPathParams.Add("idAoo", this.Configuration.ApiClient.ParameterToString(idAoo)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (aoo != null && aoo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aoo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aoo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAoo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AooResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AooResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AooResponse)));
        }

        /// <summary>
        /// Modifica la ragione sociale dell&#39;aoo 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="ragioneSociale">Ragione sociale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        public void UpdateRagioneSocialeAoo (string id, string idAoo, UpdateRagioneSocialeAooRequest ragioneSociale, string xAuthorization)
        {
             UpdateRagioneSocialeAooWithHttpInfo(id, idAoo, ragioneSociale, xAuthorization);
        }

        /// <summary>
        /// Modifica la ragione sociale dell&#39;aoo 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="ragioneSociale">Ragione sociale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRagioneSocialeAooWithHttpInfo (string id, string idAoo, UpdateRagioneSocialeAooRequest ragioneSociale, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->UpdateRagioneSocialeAoo");
            // verify the required parameter 'idAoo' is set
            if (idAoo == null)
                throw new ApiException(400, "Missing required parameter 'idAoo' when calling AoosApi->UpdateRagioneSocialeAoo");
            // verify the required parameter 'ragioneSociale' is set
            if (ragioneSociale == null)
                throw new ApiException(400, "Missing required parameter 'ragioneSociale' when calling AoosApi->UpdateRagioneSocialeAoo");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->UpdateRagioneSocialeAoo");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos/{idAoo}/ragionesociale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idAoo != null) localVarPathParams.Add("idAoo", this.Configuration.ApiClient.ParameterToString(idAoo)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (ragioneSociale != null && ragioneSociale.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ragioneSociale); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ragioneSociale; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRagioneSocialeAoo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Modifica la ragione sociale dell&#39;aoo 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="ragioneSociale">Ragione sociale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRagioneSocialeAooAsync (string id, string idAoo, UpdateRagioneSocialeAooRequest ragioneSociale, string xAuthorization)
        {
             await UpdateRagioneSocialeAooAsyncWithHttpInfo(id, idAoo, ragioneSociale, xAuthorization);

        }

        /// <summary>
        /// Modifica la ragione sociale dell&#39;aoo 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idAoo">Identificativo aoo</param>
        /// <param name="ragioneSociale">Ragione sociale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRagioneSocialeAooAsyncWithHttpInfo (string id, string idAoo, UpdateRagioneSocialeAooRequest ragioneSociale, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AoosApi->UpdateRagioneSocialeAoo");
            // verify the required parameter 'idAoo' is set
            if (idAoo == null)
                throw new ApiException(400, "Missing required parameter 'idAoo' when calling AoosApi->UpdateRagioneSocialeAoo");
            // verify the required parameter 'ragioneSociale' is set
            if (ragioneSociale == null)
                throw new ApiException(400, "Missing required parameter 'ragioneSociale' when calling AoosApi->UpdateRagioneSocialeAoo");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling AoosApi->UpdateRagioneSocialeAoo");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/aoos/{idAoo}/ragionesociale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idAoo != null) localVarPathParams.Add("idAoo", this.Configuration.ApiClient.ParameterToString(idAoo)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (ragioneSociale != null && ragioneSociale.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ragioneSociale); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ragioneSociale; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRagioneSocialeAoo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
