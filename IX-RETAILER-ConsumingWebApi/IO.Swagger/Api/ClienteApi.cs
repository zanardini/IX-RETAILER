/* 
 * Contratti API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClienteApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Recupera il cliente di un contratto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ClienteDetailsResponse</returns>
        ClienteDetailsResponse GetCliente (string id, string xAuthorization);

        /// <summary>
        /// Recupera il cliente di un contratto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ClienteDetailsResponse</returns>
        ApiResponse<ClienteDetailsResponse> GetClienteWithHttpInfo (string id, string xAuthorization);
        /// <summary>
        /// Recupera i clienti disponibili
        /// </summary>
        /// <remarks>
        /// Restituisce i clienti disponibili dato il rivenditore del contratto.              Utilizzare questa chiamata se si intende assegnare al contratto un cliente esistente
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ClientiResponse</returns>
        ClientiResponse GetClientiDisponibili (string id, string xAuthorization);

        /// <summary>
        /// Recupera i clienti disponibili
        /// </summary>
        /// <remarks>
        /// Restituisce i clienti disponibili dato il rivenditore del contratto.              Utilizzare questa chiamata se si intende assegnare al contratto un cliente esistente
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ClientiResponse</returns>
        ApiResponse<ClientiResponse> GetClientiDisponibiliWithHttpInfo (string id, string xAuthorization);
        /// <summary>
        /// Recupera i clienti disponibili
        /// </summary>
        /// <remarks>
        /// Restituisce i clienti disponibili dato il rivenditore del contratto.              Utilizzare questa chiamata se si intende assegnare al contratto un cliente esistente
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ClientiResponse</returns>
        ClientiResponse GetClientiDisponibiliCompleta (string id, string xAuthorization);

        /// <summary>
        /// Recupera i clienti disponibili
        /// </summary>
        /// <remarks>
        /// Restituisce i clienti disponibili dato il rivenditore del contratto.              Utilizzare questa chiamata se si intende assegnare al contratto un cliente esistente
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ClientiResponse</returns>
        ApiResponse<ClientiResponse> GetClientiDisponibiliCompletaWithHttpInfo (string id, string xAuthorization);
        /// <summary>
        /// Inizializza il cliente di un contratto centro servizi
        /// </summary>
        /// <remarks>
        /// Utilizzare l&#39;api di validazione di un identificativo fiscale per valorizzare il campo partitaIvaValidata ed eventualmente il nome
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ContrattoClienteResponse</returns>
        ContrattoClienteResponse InsertForCentroServizi (string id, CentroServiziClienteRequest cliente, string xAuthorization);

        /// <summary>
        /// Inizializza il cliente di un contratto centro servizi
        /// </summary>
        /// <remarks>
        /// Utilizzare l&#39;api di validazione di un identificativo fiscale per valorizzare il campo partitaIvaValidata ed eventualmente il nome
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ContrattoClienteResponse</returns>
        ApiResponse<ContrattoClienteResponse> InsertForCentroServiziWithHttpInfo (string id, CentroServiziClienteRequest cliente, string xAuthorization);
        /// <summary>
        /// Inizializza il cliente di un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// Se si intende utilizzare un cliente esistente fornire solo il suo identificativo altrimenti inserire tutti i dati.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome del cliente              in base al risultato della validazione
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ContrattoClienteResponse</returns>
        ContrattoClienteResponse InsertForClienteFinale (string id, ClienteFinaleClienteRequest cliente, string xAuthorization);

        /// <summary>
        /// Inizializza il cliente di un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// Se si intende utilizzare un cliente esistente fornire solo il suo identificativo altrimenti inserire tutti i dati.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome del cliente              in base al risultato della validazione
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ContrattoClienteResponse</returns>
        ApiResponse<ContrattoClienteResponse> InsertForClienteFinaleWithHttpInfo (string id, ClienteFinaleClienteRequest cliente, string xAuthorization);
        /// <summary>
        /// Inizializza il cliente di un contratto gruppo aziende
        /// </summary>
        /// <remarks>
        /// Utilizzare l&#39;api di validazione di un identificativo fiscale per valorizzare il campo partitaIvaValidata ed eventualmente il nome
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ContrattoClienteResponse</returns>
        ContrattoClienteResponse InsertForGruppoAziende (string id, GruppoAziendeClienteRequest cliente, string xAuthorization);

        /// <summary>
        /// Inizializza il cliente di un contratto gruppo aziende
        /// </summary>
        /// <remarks>
        /// Utilizzare l&#39;api di validazione di un identificativo fiscale per valorizzare il campo partitaIvaValidata ed eventualmente il nome
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ContrattoClienteResponse</returns>
        ApiResponse<ContrattoClienteResponse> InsertForGruppoAziendeWithHttpInfo (string id, GruppoAziendeClienteRequest cliente, string xAuthorization);
        /// <summary>
        /// Modifica la ragione sociale del cliente
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="ragioneSociale">Ragione sociale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        void UpdateRagioneSocialeCliente (string id, UpdateRagioneSocialeClienteRequest ragioneSociale, string xAuthorization);

        /// <summary>
        /// Modifica la ragione sociale del cliente
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="ragioneSociale">Ragione sociale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRagioneSocialeClienteWithHttpInfo (string id, UpdateRagioneSocialeClienteRequest ragioneSociale, string xAuthorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Recupera il cliente di un contratto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ClienteDetailsResponse</returns>
        System.Threading.Tasks.Task<ClienteDetailsResponse> GetClienteAsync (string id, string xAuthorization);

        /// <summary>
        /// Recupera il cliente di un contratto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ClienteDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClienteDetailsResponse>> GetClienteAsyncWithHttpInfo (string id, string xAuthorization);
        /// <summary>
        /// Recupera i clienti disponibili
        /// </summary>
        /// <remarks>
        /// Restituisce i clienti disponibili dato il rivenditore del contratto.              Utilizzare questa chiamata se si intende assegnare al contratto un cliente esistente
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ClientiResponse</returns>
        System.Threading.Tasks.Task<ClientiResponse> GetClientiDisponibiliAsync (string id, string xAuthorization);

        /// <summary>
        /// Recupera i clienti disponibili
        /// </summary>
        /// <remarks>
        /// Restituisce i clienti disponibili dato il rivenditore del contratto.              Utilizzare questa chiamata se si intende assegnare al contratto un cliente esistente
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ClientiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientiResponse>> GetClientiDisponibiliAsyncWithHttpInfo (string id, string xAuthorization);
        /// <summary>
        /// Recupera i clienti disponibili
        /// </summary>
        /// <remarks>
        /// Restituisce i clienti disponibili dato il rivenditore del contratto.              Utilizzare questa chiamata se si intende assegnare al contratto un cliente esistente
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ClientiResponse</returns>
        System.Threading.Tasks.Task<ClientiResponse> GetClientiDisponibiliCompletaAsync (string id, string xAuthorization);

        /// <summary>
        /// Recupera i clienti disponibili
        /// </summary>
        /// <remarks>
        /// Restituisce i clienti disponibili dato il rivenditore del contratto.              Utilizzare questa chiamata se si intende assegnare al contratto un cliente esistente
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ClientiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientiResponse>> GetClientiDisponibiliCompletaAsyncWithHttpInfo (string id, string xAuthorization);
        /// <summary>
        /// Inizializza il cliente di un contratto centro servizi
        /// </summary>
        /// <remarks>
        /// Utilizzare l&#39;api di validazione di un identificativo fiscale per valorizzare il campo partitaIvaValidata ed eventualmente il nome
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ContrattoClienteResponse</returns>
        System.Threading.Tasks.Task<ContrattoClienteResponse> InsertForCentroServiziAsync (string id, CentroServiziClienteRequest cliente, string xAuthorization);

        /// <summary>
        /// Inizializza il cliente di un contratto centro servizi
        /// </summary>
        /// <remarks>
        /// Utilizzare l&#39;api di validazione di un identificativo fiscale per valorizzare il campo partitaIvaValidata ed eventualmente il nome
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ContrattoClienteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContrattoClienteResponse>> InsertForCentroServiziAsyncWithHttpInfo (string id, CentroServiziClienteRequest cliente, string xAuthorization);
        /// <summary>
        /// Inizializza il cliente di un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// Se si intende utilizzare un cliente esistente fornire solo il suo identificativo altrimenti inserire tutti i dati.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome del cliente              in base al risultato della validazione
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ContrattoClienteResponse</returns>
        System.Threading.Tasks.Task<ContrattoClienteResponse> InsertForClienteFinaleAsync (string id, ClienteFinaleClienteRequest cliente, string xAuthorization);

        /// <summary>
        /// Inizializza il cliente di un contratto cliente finale
        /// </summary>
        /// <remarks>
        /// Se si intende utilizzare un cliente esistente fornire solo il suo identificativo altrimenti inserire tutti i dati.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome del cliente              in base al risultato della validazione
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ContrattoClienteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContrattoClienteResponse>> InsertForClienteFinaleAsyncWithHttpInfo (string id, ClienteFinaleClienteRequest cliente, string xAuthorization);
        /// <summary>
        /// Inizializza il cliente di un contratto gruppo aziende
        /// </summary>
        /// <remarks>
        /// Utilizzare l&#39;api di validazione di un identificativo fiscale per valorizzare il campo partitaIvaValidata ed eventualmente il nome
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ContrattoClienteResponse</returns>
        System.Threading.Tasks.Task<ContrattoClienteResponse> InsertForGruppoAziendeAsync (string id, GruppoAziendeClienteRequest cliente, string xAuthorization);

        /// <summary>
        /// Inizializza il cliente di un contratto gruppo aziende
        /// </summary>
        /// <remarks>
        /// Utilizzare l&#39;api di validazione di un identificativo fiscale per valorizzare il campo partitaIvaValidata ed eventualmente il nome
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ContrattoClienteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContrattoClienteResponse>> InsertForGruppoAziendeAsyncWithHttpInfo (string id, GruppoAziendeClienteRequest cliente, string xAuthorization);
        /// <summary>
        /// Modifica la ragione sociale del cliente
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="ragioneSociale">Ragione sociale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRagioneSocialeClienteAsync (string id, UpdateRagioneSocialeClienteRequest ragioneSociale, string xAuthorization);

        /// <summary>
        /// Modifica la ragione sociale del cliente
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="ragioneSociale">Ragione sociale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRagioneSocialeClienteAsyncWithHttpInfo (string id, UpdateRagioneSocialeClienteRequest ragioneSociale, string xAuthorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClienteApi : IClienteApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClienteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClienteApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClienteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClienteApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Recupera il cliente di un contratto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ClienteDetailsResponse</returns>
        public ClienteDetailsResponse GetCliente (string id, string xAuthorization)
        {
             ApiResponse<ClienteDetailsResponse> localVarResponse = GetClienteWithHttpInfo(id, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera il cliente di un contratto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ClienteDetailsResponse</returns>
        public ApiResponse< ClienteDetailsResponse > GetClienteWithHttpInfo (string id, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClienteApi->GetCliente");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ClienteApi->GetCliente");

            var localVarPath = "/api/v1/contratti/{id}/cliente";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCliente", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClienteDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClienteDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClienteDetailsResponse)));
        }

        /// <summary>
        /// Recupera il cliente di un contratto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ClienteDetailsResponse</returns>
        public async System.Threading.Tasks.Task<ClienteDetailsResponse> GetClienteAsync (string id, string xAuthorization)
        {
             ApiResponse<ClienteDetailsResponse> localVarResponse = await GetClienteAsyncWithHttpInfo(id, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera il cliente di un contratto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ClienteDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClienteDetailsResponse>> GetClienteAsyncWithHttpInfo (string id, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClienteApi->GetCliente");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ClienteApi->GetCliente");

            var localVarPath = "/api/v1/contratti/{id}/cliente";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCliente", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClienteDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClienteDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClienteDetailsResponse)));
        }

        /// <summary>
        /// Recupera i clienti disponibili Restituisce i clienti disponibili dato il rivenditore del contratto.              Utilizzare questa chiamata se si intende assegnare al contratto un cliente esistente
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ClientiResponse</returns>
        public ClientiResponse GetClientiDisponibili (string id, string xAuthorization)
        {
             ApiResponse<ClientiResponse> localVarResponse = GetClientiDisponibiliWithHttpInfo(id, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i clienti disponibili Restituisce i clienti disponibili dato il rivenditore del contratto.              Utilizzare questa chiamata se si intende assegnare al contratto un cliente esistente
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ClientiResponse</returns>
        public ApiResponse< ClientiResponse > GetClientiDisponibiliWithHttpInfo (string id, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClienteApi->GetClientiDisponibili");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ClienteApi->GetClientiDisponibili");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/clienti";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientiDisponibili", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientiResponse)));
        }

        /// <summary>
        /// Recupera i clienti disponibili Restituisce i clienti disponibili dato il rivenditore del contratto.              Utilizzare questa chiamata se si intende assegnare al contratto un cliente esistente
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ClientiResponse</returns>
        public async System.Threading.Tasks.Task<ClientiResponse> GetClientiDisponibiliAsync (string id, string xAuthorization)
        {
             ApiResponse<ClientiResponse> localVarResponse = await GetClientiDisponibiliAsyncWithHttpInfo(id, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i clienti disponibili Restituisce i clienti disponibili dato il rivenditore del contratto.              Utilizzare questa chiamata se si intende assegnare al contratto un cliente esistente
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ClientiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientiResponse>> GetClientiDisponibiliAsyncWithHttpInfo (string id, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClienteApi->GetClientiDisponibili");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ClienteApi->GetClientiDisponibili");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/clienti";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientiDisponibili", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientiResponse)));
        }

        /// <summary>
        /// Recupera i clienti disponibili Restituisce i clienti disponibili dato il rivenditore del contratto.              Utilizzare questa chiamata se si intende assegnare al contratto un cliente esistente
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ClientiResponse</returns>
        public ClientiResponse GetClientiDisponibiliCompleta (string id, string xAuthorization)
        {
             ApiResponse<ClientiResponse> localVarResponse = GetClientiDisponibiliCompletaWithHttpInfo(id, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i clienti disponibili Restituisce i clienti disponibili dato il rivenditore del contratto.              Utilizzare questa chiamata se si intende assegnare al contratto un cliente esistente
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ClientiResponse</returns>
        public ApiResponse< ClientiResponse > GetClientiDisponibiliCompletaWithHttpInfo (string id, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClienteApi->GetClientiDisponibiliCompleta");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ClienteApi->GetClientiDisponibiliCompleta");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/clienticompleta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientiDisponibiliCompleta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientiResponse)));
        }

        /// <summary>
        /// Recupera i clienti disponibili Restituisce i clienti disponibili dato il rivenditore del contratto.              Utilizzare questa chiamata se si intende assegnare al contratto un cliente esistente
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ClientiResponse</returns>
        public async System.Threading.Tasks.Task<ClientiResponse> GetClientiDisponibiliCompletaAsync (string id, string xAuthorization)
        {
             ApiResponse<ClientiResponse> localVarResponse = await GetClientiDisponibiliCompletaAsyncWithHttpInfo(id, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i clienti disponibili Restituisce i clienti disponibili dato il rivenditore del contratto.              Utilizzare questa chiamata se si intende assegnare al contratto un cliente esistente
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ClientiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientiResponse>> GetClientiDisponibiliCompletaAsyncWithHttpInfo (string id, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClienteApi->GetClientiDisponibiliCompleta");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ClienteApi->GetClientiDisponibiliCompleta");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/clienticompleta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientiDisponibiliCompleta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientiResponse)));
        }

        /// <summary>
        /// Inizializza il cliente di un contratto centro servizi Utilizzare l&#39;api di validazione di un identificativo fiscale per valorizzare il campo partitaIvaValidata ed eventualmente il nome
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ContrattoClienteResponse</returns>
        public ContrattoClienteResponse InsertForCentroServizi (string id, CentroServiziClienteRequest cliente, string xAuthorization)
        {
             ApiResponse<ContrattoClienteResponse> localVarResponse = InsertForCentroServiziWithHttpInfo(id, cliente, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Inizializza il cliente di un contratto centro servizi Utilizzare l&#39;api di validazione di un identificativo fiscale per valorizzare il campo partitaIvaValidata ed eventualmente il nome
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ContrattoClienteResponse</returns>
        public ApiResponse< ContrattoClienteResponse > InsertForCentroServiziWithHttpInfo (string id, CentroServiziClienteRequest cliente, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClienteApi->InsertForCentroServizi");
            // verify the required parameter 'cliente' is set
            if (cliente == null)
                throw new ApiException(400, "Missing required parameter 'cliente' when calling ClienteApi->InsertForCentroServizi");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ClienteApi->InsertForCentroServizi");

            var localVarPath = "/api/v1/contratti/{id}/centroservizi/cliente";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (cliente != null && cliente.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cliente); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cliente; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertForCentroServizi", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContrattoClienteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContrattoClienteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContrattoClienteResponse)));
        }

        /// <summary>
        /// Inizializza il cliente di un contratto centro servizi Utilizzare l&#39;api di validazione di un identificativo fiscale per valorizzare il campo partitaIvaValidata ed eventualmente il nome
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ContrattoClienteResponse</returns>
        public async System.Threading.Tasks.Task<ContrattoClienteResponse> InsertForCentroServiziAsync (string id, CentroServiziClienteRequest cliente, string xAuthorization)
        {
             ApiResponse<ContrattoClienteResponse> localVarResponse = await InsertForCentroServiziAsyncWithHttpInfo(id, cliente, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Inizializza il cliente di un contratto centro servizi Utilizzare l&#39;api di validazione di un identificativo fiscale per valorizzare il campo partitaIvaValidata ed eventualmente il nome
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ContrattoClienteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContrattoClienteResponse>> InsertForCentroServiziAsyncWithHttpInfo (string id, CentroServiziClienteRequest cliente, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClienteApi->InsertForCentroServizi");
            // verify the required parameter 'cliente' is set
            if (cliente == null)
                throw new ApiException(400, "Missing required parameter 'cliente' when calling ClienteApi->InsertForCentroServizi");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ClienteApi->InsertForCentroServizi");

            var localVarPath = "/api/v1/contratti/{id}/centroservizi/cliente";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (cliente != null && cliente.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cliente); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cliente; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertForCentroServizi", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContrattoClienteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContrattoClienteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContrattoClienteResponse)));
        }

        /// <summary>
        /// Inizializza il cliente di un contratto cliente finale Se si intende utilizzare un cliente esistente fornire solo il suo identificativo altrimenti inserire tutti i dati.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome del cliente              in base al risultato della validazione
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ContrattoClienteResponse</returns>
        public ContrattoClienteResponse InsertForClienteFinale (string id, ClienteFinaleClienteRequest cliente, string xAuthorization)
        {
             ApiResponse<ContrattoClienteResponse> localVarResponse = InsertForClienteFinaleWithHttpInfo(id, cliente, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Inizializza il cliente di un contratto cliente finale Se si intende utilizzare un cliente esistente fornire solo il suo identificativo altrimenti inserire tutti i dati.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome del cliente              in base al risultato della validazione
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ContrattoClienteResponse</returns>
        public ApiResponse< ContrattoClienteResponse > InsertForClienteFinaleWithHttpInfo (string id, ClienteFinaleClienteRequest cliente, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClienteApi->InsertForClienteFinale");
            // verify the required parameter 'cliente' is set
            if (cliente == null)
                throw new ApiException(400, "Missing required parameter 'cliente' when calling ClienteApi->InsertForClienteFinale");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ClienteApi->InsertForClienteFinale");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/cliente";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (cliente != null && cliente.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cliente); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cliente; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertForClienteFinale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContrattoClienteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContrattoClienteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContrattoClienteResponse)));
        }

        /// <summary>
        /// Inizializza il cliente di un contratto cliente finale Se si intende utilizzare un cliente esistente fornire solo il suo identificativo altrimenti inserire tutti i dati.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome del cliente              in base al risultato della validazione
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ContrattoClienteResponse</returns>
        public async System.Threading.Tasks.Task<ContrattoClienteResponse> InsertForClienteFinaleAsync (string id, ClienteFinaleClienteRequest cliente, string xAuthorization)
        {
             ApiResponse<ContrattoClienteResponse> localVarResponse = await InsertForClienteFinaleAsyncWithHttpInfo(id, cliente, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Inizializza il cliente di un contratto cliente finale Se si intende utilizzare un cliente esistente fornire solo il suo identificativo altrimenti inserire tutti i dati.               Viene effettuata la validazione della partita iva a livello comunitario e viene eventualmente modificato il nome del cliente              in base al risultato della validazione
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ContrattoClienteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContrattoClienteResponse>> InsertForClienteFinaleAsyncWithHttpInfo (string id, ClienteFinaleClienteRequest cliente, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClienteApi->InsertForClienteFinale");
            // verify the required parameter 'cliente' is set
            if (cliente == null)
                throw new ApiException(400, "Missing required parameter 'cliente' when calling ClienteApi->InsertForClienteFinale");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ClienteApi->InsertForClienteFinale");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/cliente";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (cliente != null && cliente.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cliente); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cliente; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertForClienteFinale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContrattoClienteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContrattoClienteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContrattoClienteResponse)));
        }

        /// <summary>
        /// Inizializza il cliente di un contratto gruppo aziende Utilizzare l&#39;api di validazione di un identificativo fiscale per valorizzare il campo partitaIvaValidata ed eventualmente il nome
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ContrattoClienteResponse</returns>
        public ContrattoClienteResponse InsertForGruppoAziende (string id, GruppoAziendeClienteRequest cliente, string xAuthorization)
        {
             ApiResponse<ContrattoClienteResponse> localVarResponse = InsertForGruppoAziendeWithHttpInfo(id, cliente, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Inizializza il cliente di un contratto gruppo aziende Utilizzare l&#39;api di validazione di un identificativo fiscale per valorizzare il campo partitaIvaValidata ed eventualmente il nome
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ContrattoClienteResponse</returns>
        public ApiResponse< ContrattoClienteResponse > InsertForGruppoAziendeWithHttpInfo (string id, GruppoAziendeClienteRequest cliente, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClienteApi->InsertForGruppoAziende");
            // verify the required parameter 'cliente' is set
            if (cliente == null)
                throw new ApiException(400, "Missing required parameter 'cliente' when calling ClienteApi->InsertForGruppoAziende");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ClienteApi->InsertForGruppoAziende");

            var localVarPath = "/api/v1/contratti/{id}/gruppoaziende/cliente";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (cliente != null && cliente.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cliente); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cliente; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertForGruppoAziende", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContrattoClienteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContrattoClienteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContrattoClienteResponse)));
        }

        /// <summary>
        /// Inizializza il cliente di un contratto gruppo aziende Utilizzare l&#39;api di validazione di un identificativo fiscale per valorizzare il campo partitaIvaValidata ed eventualmente il nome
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ContrattoClienteResponse</returns>
        public async System.Threading.Tasks.Task<ContrattoClienteResponse> InsertForGruppoAziendeAsync (string id, GruppoAziendeClienteRequest cliente, string xAuthorization)
        {
             ApiResponse<ContrattoClienteResponse> localVarResponse = await InsertForGruppoAziendeAsyncWithHttpInfo(id, cliente, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Inizializza il cliente di un contratto gruppo aziende Utilizzare l&#39;api di validazione di un identificativo fiscale per valorizzare il campo partitaIvaValidata ed eventualmente il nome
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ContrattoClienteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContrattoClienteResponse>> InsertForGruppoAziendeAsyncWithHttpInfo (string id, GruppoAziendeClienteRequest cliente, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClienteApi->InsertForGruppoAziende");
            // verify the required parameter 'cliente' is set
            if (cliente == null)
                throw new ApiException(400, "Missing required parameter 'cliente' when calling ClienteApi->InsertForGruppoAziende");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ClienteApi->InsertForGruppoAziende");

            var localVarPath = "/api/v1/contratti/{id}/gruppoaziende/cliente";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (cliente != null && cliente.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cliente); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cliente; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertForGruppoAziende", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContrattoClienteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContrattoClienteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContrattoClienteResponse)));
        }

        /// <summary>
        /// Modifica la ragione sociale del cliente 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="ragioneSociale">Ragione sociale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        public void UpdateRagioneSocialeCliente (string id, UpdateRagioneSocialeClienteRequest ragioneSociale, string xAuthorization)
        {
             UpdateRagioneSocialeClienteWithHttpInfo(id, ragioneSociale, xAuthorization);
        }

        /// <summary>
        /// Modifica la ragione sociale del cliente 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="ragioneSociale">Ragione sociale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRagioneSocialeClienteWithHttpInfo (string id, UpdateRagioneSocialeClienteRequest ragioneSociale, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClienteApi->UpdateRagioneSocialeCliente");
            // verify the required parameter 'ragioneSociale' is set
            if (ragioneSociale == null)
                throw new ApiException(400, "Missing required parameter 'ragioneSociale' when calling ClienteApi->UpdateRagioneSocialeCliente");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ClienteApi->UpdateRagioneSocialeCliente");

            var localVarPath = "/api/v1/contratti/{id}/cliente/ragionesociale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (ragioneSociale != null && ragioneSociale.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ragioneSociale); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ragioneSociale; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRagioneSocialeCliente", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Modifica la ragione sociale del cliente 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="ragioneSociale">Ragione sociale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRagioneSocialeClienteAsync (string id, UpdateRagioneSocialeClienteRequest ragioneSociale, string xAuthorization)
        {
             await UpdateRagioneSocialeClienteAsyncWithHttpInfo(id, ragioneSociale, xAuthorization);

        }

        /// <summary>
        /// Modifica la ragione sociale del cliente 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="ragioneSociale">Ragione sociale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRagioneSocialeClienteAsyncWithHttpInfo (string id, UpdateRagioneSocialeClienteRequest ragioneSociale, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClienteApi->UpdateRagioneSocialeCliente");
            // verify the required parameter 'ragioneSociale' is set
            if (ragioneSociale == null)
                throw new ApiException(400, "Missing required parameter 'ragioneSociale' when calling ClienteApi->UpdateRagioneSocialeCliente");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ClienteApi->UpdateRagioneSocialeCliente");

            var localVarPath = "/api/v1/contratti/{id}/cliente/ragionesociale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (ragioneSociale != null && ragioneSociale.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ragioneSociale); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ragioneSociale; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRagioneSocialeCliente", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
