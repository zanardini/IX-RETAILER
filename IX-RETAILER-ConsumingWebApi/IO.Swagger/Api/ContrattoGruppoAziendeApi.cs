/* 
 * Contratti API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContrattoGruppoAziendeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Crea un contratto gruppo aziende
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contratto">Contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>CreateContrattoResponse</returns>
        CreateContrattoResponse CreateContrattoGruppoAziende (CreateContrattoRequest contratto, string xAuthorization);

        /// <summary>
        /// Crea un contratto gruppo aziende
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contratto">Contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of CreateContrattoResponse</returns>
        ApiResponse<CreateContrattoResponse> CreateContrattoGruppoAziendeWithHttpInfo (CreateContrattoRequest contratto, string xAuthorization);
        /// <summary>
        /// Aggiunge ad un contratto gruppo aziende il modulo IxCe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="modulo">Modulo IxCe</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        void GruppoAziendeInsertModuloIxCe (string id, GruppoAziendeModuloIxCeRequest modulo, string xAuthorization);

        /// <summary>
        /// Aggiunge ad un contratto gruppo aziende il modulo IxCe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="modulo">Modulo IxCe</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GruppoAziendeInsertModuloIxCeWithHttpInfo (string id, GruppoAziendeModuloIxCeRequest modulo, string xAuthorization);
        /// <summary>
        /// Aggiunge il rappresentante legale ad un contratto gruppo aziende
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="legaleRappresentante">Rappresentante legale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        void InsertLegaleRappresentanteForGruppoAziende (string id, GruppoAziendeRappresentanteLegaleRequest legaleRappresentante, string xAuthorization);

        /// <summary>
        /// Aggiunge il rappresentante legale ad un contratto gruppo aziende
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="legaleRappresentante">Rappresentante legale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InsertLegaleRappresentanteForGruppoAziendeWithHttpInfo (string id, GruppoAziendeRappresentanteLegaleRequest legaleRappresentante, string xAuthorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Crea un contratto gruppo aziende
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contratto">Contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of CreateContrattoResponse</returns>
        System.Threading.Tasks.Task<CreateContrattoResponse> CreateContrattoGruppoAziendeAsync (CreateContrattoRequest contratto, string xAuthorization);

        /// <summary>
        /// Crea un contratto gruppo aziende
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contratto">Contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (CreateContrattoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateContrattoResponse>> CreateContrattoGruppoAziendeAsyncWithHttpInfo (CreateContrattoRequest contratto, string xAuthorization);
        /// <summary>
        /// Aggiunge ad un contratto gruppo aziende il modulo IxCe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="modulo">Modulo IxCe</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GruppoAziendeInsertModuloIxCeAsync (string id, GruppoAziendeModuloIxCeRequest modulo, string xAuthorization);

        /// <summary>
        /// Aggiunge ad un contratto gruppo aziende il modulo IxCe
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="modulo">Modulo IxCe</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GruppoAziendeInsertModuloIxCeAsyncWithHttpInfo (string id, GruppoAziendeModuloIxCeRequest modulo, string xAuthorization);
        /// <summary>
        /// Aggiunge il rappresentante legale ad un contratto gruppo aziende
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="legaleRappresentante">Rappresentante legale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InsertLegaleRappresentanteForGruppoAziendeAsync (string id, GruppoAziendeRappresentanteLegaleRequest legaleRappresentante, string xAuthorization);

        /// <summary>
        /// Aggiunge il rappresentante legale ad un contratto gruppo aziende
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="legaleRappresentante">Rappresentante legale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InsertLegaleRappresentanteForGruppoAziendeAsyncWithHttpInfo (string id, GruppoAziendeRappresentanteLegaleRequest legaleRappresentante, string xAuthorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContrattoGruppoAziendeApi : IContrattoGruppoAziendeApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContrattoGruppoAziendeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContrattoGruppoAziendeApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContrattoGruppoAziendeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContrattoGruppoAziendeApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Crea un contratto gruppo aziende 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contratto">Contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>CreateContrattoResponse</returns>
        public CreateContrattoResponse CreateContrattoGruppoAziende (CreateContrattoRequest contratto, string xAuthorization)
        {
             ApiResponse<CreateContrattoResponse> localVarResponse = CreateContrattoGruppoAziendeWithHttpInfo(contratto, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Crea un contratto gruppo aziende 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contratto">Contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of CreateContrattoResponse</returns>
        public ApiResponse< CreateContrattoResponse > CreateContrattoGruppoAziendeWithHttpInfo (CreateContrattoRequest contratto, string xAuthorization)
        {
            // verify the required parameter 'contratto' is set
            if (contratto == null)
                throw new ApiException(400, "Missing required parameter 'contratto' when calling ContrattoGruppoAziendeApi->CreateContrattoGruppoAziende");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ContrattoGruppoAziendeApi->CreateContrattoGruppoAziende");

            var localVarPath = "/api/v1/contratti/gruppoaziende";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (contratto != null && contratto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contratto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contratto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContrattoGruppoAziende", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateContrattoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateContrattoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateContrattoResponse)));
        }

        /// <summary>
        /// Crea un contratto gruppo aziende 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contratto">Contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of CreateContrattoResponse</returns>
        public async System.Threading.Tasks.Task<CreateContrattoResponse> CreateContrattoGruppoAziendeAsync (CreateContrattoRequest contratto, string xAuthorization)
        {
             ApiResponse<CreateContrattoResponse> localVarResponse = await CreateContrattoGruppoAziendeAsyncWithHttpInfo(contratto, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Crea un contratto gruppo aziende 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contratto">Contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (CreateContrattoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateContrattoResponse>> CreateContrattoGruppoAziendeAsyncWithHttpInfo (CreateContrattoRequest contratto, string xAuthorization)
        {
            // verify the required parameter 'contratto' is set
            if (contratto == null)
                throw new ApiException(400, "Missing required parameter 'contratto' when calling ContrattoGruppoAziendeApi->CreateContrattoGruppoAziende");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ContrattoGruppoAziendeApi->CreateContrattoGruppoAziende");

            var localVarPath = "/api/v1/contratti/gruppoaziende";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (contratto != null && contratto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contratto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contratto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContrattoGruppoAziende", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateContrattoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateContrattoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateContrattoResponse)));
        }

        /// <summary>
        /// Aggiunge ad un contratto gruppo aziende il modulo IxCe 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="modulo">Modulo IxCe</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        public void GruppoAziendeInsertModuloIxCe (string id, GruppoAziendeModuloIxCeRequest modulo, string xAuthorization)
        {
             GruppoAziendeInsertModuloIxCeWithHttpInfo(id, modulo, xAuthorization);
        }

        /// <summary>
        /// Aggiunge ad un contratto gruppo aziende il modulo IxCe 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="modulo">Modulo IxCe</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GruppoAziendeInsertModuloIxCeWithHttpInfo (string id, GruppoAziendeModuloIxCeRequest modulo, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContrattoGruppoAziendeApi->GruppoAziendeInsertModuloIxCe");
            // verify the required parameter 'modulo' is set
            if (modulo == null)
                throw new ApiException(400, "Missing required parameter 'modulo' when calling ContrattoGruppoAziendeApi->GruppoAziendeInsertModuloIxCe");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ContrattoGruppoAziendeApi->GruppoAziendeInsertModuloIxCe");

            var localVarPath = "/api/v1/contratti/{id}/gruppoaziende/moduli/ixce";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (modulo != null && modulo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modulo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modulo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GruppoAziendeInsertModuloIxCe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Aggiunge ad un contratto gruppo aziende il modulo IxCe 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="modulo">Modulo IxCe</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GruppoAziendeInsertModuloIxCeAsync (string id, GruppoAziendeModuloIxCeRequest modulo, string xAuthorization)
        {
             await GruppoAziendeInsertModuloIxCeAsyncWithHttpInfo(id, modulo, xAuthorization);

        }

        /// <summary>
        /// Aggiunge ad un contratto gruppo aziende il modulo IxCe 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="modulo">Modulo IxCe</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GruppoAziendeInsertModuloIxCeAsyncWithHttpInfo (string id, GruppoAziendeModuloIxCeRequest modulo, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContrattoGruppoAziendeApi->GruppoAziendeInsertModuloIxCe");
            // verify the required parameter 'modulo' is set
            if (modulo == null)
                throw new ApiException(400, "Missing required parameter 'modulo' when calling ContrattoGruppoAziendeApi->GruppoAziendeInsertModuloIxCe");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ContrattoGruppoAziendeApi->GruppoAziendeInsertModuloIxCe");

            var localVarPath = "/api/v1/contratti/{id}/gruppoaziende/moduli/ixce";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (modulo != null && modulo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modulo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modulo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GruppoAziendeInsertModuloIxCe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Aggiunge il rappresentante legale ad un contratto gruppo aziende 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="legaleRappresentante">Rappresentante legale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        public void InsertLegaleRappresentanteForGruppoAziende (string id, GruppoAziendeRappresentanteLegaleRequest legaleRappresentante, string xAuthorization)
        {
             InsertLegaleRappresentanteForGruppoAziendeWithHttpInfo(id, legaleRappresentante, xAuthorization);
        }

        /// <summary>
        /// Aggiunge il rappresentante legale ad un contratto gruppo aziende 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="legaleRappresentante">Rappresentante legale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InsertLegaleRappresentanteForGruppoAziendeWithHttpInfo (string id, GruppoAziendeRappresentanteLegaleRequest legaleRappresentante, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContrattoGruppoAziendeApi->InsertLegaleRappresentanteForGruppoAziende");
            // verify the required parameter 'legaleRappresentante' is set
            if (legaleRappresentante == null)
                throw new ApiException(400, "Missing required parameter 'legaleRappresentante' when calling ContrattoGruppoAziendeApi->InsertLegaleRappresentanteForGruppoAziende");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ContrattoGruppoAziendeApi->InsertLegaleRappresentanteForGruppoAziende");

            var localVarPath = "/api/v1/contratti/{id}/gruppoaziende/legalerappresentante";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (legaleRappresentante != null && legaleRappresentante.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(legaleRappresentante); // http body (model) parameter
            }
            else
            {
                localVarPostBody = legaleRappresentante; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertLegaleRappresentanteForGruppoAziende", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Aggiunge il rappresentante legale ad un contratto gruppo aziende 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="legaleRappresentante">Rappresentante legale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InsertLegaleRappresentanteForGruppoAziendeAsync (string id, GruppoAziendeRappresentanteLegaleRequest legaleRappresentante, string xAuthorization)
        {
             await InsertLegaleRappresentanteForGruppoAziendeAsyncWithHttpInfo(id, legaleRappresentante, xAuthorization);

        }

        /// <summary>
        /// Aggiunge il rappresentante legale ad un contratto gruppo aziende 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="legaleRappresentante">Rappresentante legale</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InsertLegaleRappresentanteForGruppoAziendeAsyncWithHttpInfo (string id, GruppoAziendeRappresentanteLegaleRequest legaleRappresentante, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContrattoGruppoAziendeApi->InsertLegaleRappresentanteForGruppoAziende");
            // verify the required parameter 'legaleRappresentante' is set
            if (legaleRappresentante == null)
                throw new ApiException(400, "Missing required parameter 'legaleRappresentante' when calling ContrattoGruppoAziendeApi->InsertLegaleRappresentanteForGruppoAziende");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ContrattoGruppoAziendeApi->InsertLegaleRappresentanteForGruppoAziende");

            var localVarPath = "/api/v1/contratti/{id}/gruppoaziende/legalerappresentante";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (legaleRappresentante != null && legaleRappresentante.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(legaleRappresentante); // http body (model) parameter
            }
            else
            {
                localVarPostBody = legaleRappresentante; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertLegaleRappresentanteForGruppoAziende", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
