/* 
 * Contratti API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatiCertificatoApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Rimuove un documento da un utente
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idUtente">Identificativo utente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        void DeleteDocumento (string id, string idUtente, string xAuthorization);

        /// <summary>
        /// Rimuove un documento da un utente
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idUtente">Identificativo utente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDocumentoWithHttpInfo (string id, string idUtente, string xAuthorization);
        /// <summary>
        /// Recupera i documenti degli utenti del contratto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>DocumentiUtentiResponse</returns>
        DocumentiUtentiResponse GetDocumentiUtenti (string id, string xAuthorization);

        /// <summary>
        /// Recupera i documenti degli utenti del contratto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of DocumentiUtentiResponse</returns>
        ApiResponse<DocumentiUtentiResponse> GetDocumentiUtentiWithHttpInfo (string id, string xAuthorization);
        /// <summary>
        /// Recupera un documento di un utente
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idUtente">Identificativo utente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>DocumentoUtenteResponse</returns>
        DocumentoUtenteResponse GetDocumentoUtente (string id, string idUtente, string xAuthorization);

        /// <summary>
        /// Recupera un documento di un utente
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idUtente">Identificativo utente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of DocumentoUtenteResponse</returns>
        ApiResponse<DocumentoUtenteResponse> GetDocumentoUtenteWithHttpInfo (string id, string idUtente, string xAuthorization);
        /// <summary>
        /// Aggiunge i documenti agli utenti
        /// </summary>
        /// <remarks>
        /// Gli utenti disponibili sono quelli del contratto
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="documenti">Documenti</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        void InsertDocumenti (string id, DocumentiUtentiRequest documenti, string xAuthorization);

        /// <summary>
        /// Aggiunge i documenti agli utenti
        /// </summary>
        /// <remarks>
        /// Gli utenti disponibili sono quelli del contratto
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="documenti">Documenti</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InsertDocumentiWithHttpInfo (string id, DocumentiUtentiRequest documenti, string xAuthorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Rimuove un documento da un utente
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idUtente">Identificativo utente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDocumentoAsync (string id, string idUtente, string xAuthorization);

        /// <summary>
        /// Rimuove un documento da un utente
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idUtente">Identificativo utente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDocumentoAsyncWithHttpInfo (string id, string idUtente, string xAuthorization);
        /// <summary>
        /// Recupera i documenti degli utenti del contratto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of DocumentiUtentiResponse</returns>
        System.Threading.Tasks.Task<DocumentiUtentiResponse> GetDocumentiUtentiAsync (string id, string xAuthorization);

        /// <summary>
        /// Recupera i documenti degli utenti del contratto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (DocumentiUtentiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentiUtentiResponse>> GetDocumentiUtentiAsyncWithHttpInfo (string id, string xAuthorization);
        /// <summary>
        /// Recupera un documento di un utente
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idUtente">Identificativo utente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of DocumentoUtenteResponse</returns>
        System.Threading.Tasks.Task<DocumentoUtenteResponse> GetDocumentoUtenteAsync (string id, string idUtente, string xAuthorization);

        /// <summary>
        /// Recupera un documento di un utente
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idUtente">Identificativo utente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (DocumentoUtenteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentoUtenteResponse>> GetDocumentoUtenteAsyncWithHttpInfo (string id, string idUtente, string xAuthorization);
        /// <summary>
        /// Aggiunge i documenti agli utenti
        /// </summary>
        /// <remarks>
        /// Gli utenti disponibili sono quelli del contratto
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="documenti">Documenti</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InsertDocumentiAsync (string id, DocumentiUtentiRequest documenti, string xAuthorization);

        /// <summary>
        /// Aggiunge i documenti agli utenti
        /// </summary>
        /// <remarks>
        /// Gli utenti disponibili sono quelli del contratto
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="documenti">Documenti</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InsertDocumentiAsyncWithHttpInfo (string id, DocumentiUtentiRequest documenti, string xAuthorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DatiCertificatoApi : IDatiCertificatoApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DatiCertificatoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatiCertificatoApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatiCertificatoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DatiCertificatoApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Rimuove un documento da un utente 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idUtente">Identificativo utente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        public void DeleteDocumento (string id, string idUtente, string xAuthorization)
        {
             DeleteDocumentoWithHttpInfo(id, idUtente, xAuthorization);
        }

        /// <summary>
        /// Rimuove un documento da un utente 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idUtente">Identificativo utente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDocumentoWithHttpInfo (string id, string idUtente, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DatiCertificatoApi->DeleteDocumento");
            // verify the required parameter 'idUtente' is set
            if (idUtente == null)
                throw new ApiException(400, "Missing required parameter 'idUtente' when calling DatiCertificatoApi->DeleteDocumento");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling DatiCertificatoApi->DeleteDocumento");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/utenti/{idUtente}/documento";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idUtente != null) localVarPathParams.Add("idUtente", this.Configuration.ApiClient.ParameterToString(idUtente)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocumento", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Rimuove un documento da un utente 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idUtente">Identificativo utente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDocumentoAsync (string id, string idUtente, string xAuthorization)
        {
             await DeleteDocumentoAsyncWithHttpInfo(id, idUtente, xAuthorization);

        }

        /// <summary>
        /// Rimuove un documento da un utente 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idUtente">Identificativo utente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDocumentoAsyncWithHttpInfo (string id, string idUtente, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DatiCertificatoApi->DeleteDocumento");
            // verify the required parameter 'idUtente' is set
            if (idUtente == null)
                throw new ApiException(400, "Missing required parameter 'idUtente' when calling DatiCertificatoApi->DeleteDocumento");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling DatiCertificatoApi->DeleteDocumento");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/utenti/{idUtente}/documento";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idUtente != null) localVarPathParams.Add("idUtente", this.Configuration.ApiClient.ParameterToString(idUtente)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocumento", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Recupera i documenti degli utenti del contratto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>DocumentiUtentiResponse</returns>
        public DocumentiUtentiResponse GetDocumentiUtenti (string id, string xAuthorization)
        {
             ApiResponse<DocumentiUtentiResponse> localVarResponse = GetDocumentiUtentiWithHttpInfo(id, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera i documenti degli utenti del contratto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of DocumentiUtentiResponse</returns>
        public ApiResponse< DocumentiUtentiResponse > GetDocumentiUtentiWithHttpInfo (string id, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DatiCertificatoApi->GetDocumentiUtenti");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling DatiCertificatoApi->GetDocumentiUtenti");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/utenti/documento";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentiUtenti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentiUtentiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentiUtentiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentiUtentiResponse)));
        }

        /// <summary>
        /// Recupera i documenti degli utenti del contratto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of DocumentiUtentiResponse</returns>
        public async System.Threading.Tasks.Task<DocumentiUtentiResponse> GetDocumentiUtentiAsync (string id, string xAuthorization)
        {
             ApiResponse<DocumentiUtentiResponse> localVarResponse = await GetDocumentiUtentiAsyncWithHttpInfo(id, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera i documenti degli utenti del contratto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (DocumentiUtentiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentiUtentiResponse>> GetDocumentiUtentiAsyncWithHttpInfo (string id, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DatiCertificatoApi->GetDocumentiUtenti");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling DatiCertificatoApi->GetDocumentiUtenti");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/utenti/documento";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentiUtenti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentiUtentiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentiUtentiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentiUtentiResponse)));
        }

        /// <summary>
        /// Recupera un documento di un utente 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idUtente">Identificativo utente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>DocumentoUtenteResponse</returns>
        public DocumentoUtenteResponse GetDocumentoUtente (string id, string idUtente, string xAuthorization)
        {
             ApiResponse<DocumentoUtenteResponse> localVarResponse = GetDocumentoUtenteWithHttpInfo(id, idUtente, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recupera un documento di un utente 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idUtente">Identificativo utente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of DocumentoUtenteResponse</returns>
        public ApiResponse< DocumentoUtenteResponse > GetDocumentoUtenteWithHttpInfo (string id, string idUtente, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DatiCertificatoApi->GetDocumentoUtente");
            // verify the required parameter 'idUtente' is set
            if (idUtente == null)
                throw new ApiException(400, "Missing required parameter 'idUtente' when calling DatiCertificatoApi->GetDocumentoUtente");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling DatiCertificatoApi->GetDocumentoUtente");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/utenti/{idUtente}/documento";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idUtente != null) localVarPathParams.Add("idUtente", this.Configuration.ApiClient.ParameterToString(idUtente)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentoUtente", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentoUtenteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentoUtenteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentoUtenteResponse)));
        }

        /// <summary>
        /// Recupera un documento di un utente 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idUtente">Identificativo utente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of DocumentoUtenteResponse</returns>
        public async System.Threading.Tasks.Task<DocumentoUtenteResponse> GetDocumentoUtenteAsync (string id, string idUtente, string xAuthorization)
        {
             ApiResponse<DocumentoUtenteResponse> localVarResponse = await GetDocumentoUtenteAsyncWithHttpInfo(id, idUtente, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recupera un documento di un utente 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="idUtente">Identificativo utente</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (DocumentoUtenteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentoUtenteResponse>> GetDocumentoUtenteAsyncWithHttpInfo (string id, string idUtente, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DatiCertificatoApi->GetDocumentoUtente");
            // verify the required parameter 'idUtente' is set
            if (idUtente == null)
                throw new ApiException(400, "Missing required parameter 'idUtente' when calling DatiCertificatoApi->GetDocumentoUtente");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling DatiCertificatoApi->GetDocumentoUtente");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/utenti/{idUtente}/documento";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (idUtente != null) localVarPathParams.Add("idUtente", this.Configuration.ApiClient.ParameterToString(idUtente)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentoUtente", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentoUtenteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentoUtenteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentoUtenteResponse)));
        }

        /// <summary>
        /// Aggiunge i documenti agli utenti Gli utenti disponibili sono quelli del contratto
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="documenti">Documenti</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        public void InsertDocumenti (string id, DocumentiUtentiRequest documenti, string xAuthorization)
        {
             InsertDocumentiWithHttpInfo(id, documenti, xAuthorization);
        }

        /// <summary>
        /// Aggiunge i documenti agli utenti Gli utenti disponibili sono quelli del contratto
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="documenti">Documenti</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InsertDocumentiWithHttpInfo (string id, DocumentiUtentiRequest documenti, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DatiCertificatoApi->InsertDocumenti");
            // verify the required parameter 'documenti' is set
            if (documenti == null)
                throw new ApiException(400, "Missing required parameter 'documenti' when calling DatiCertificatoApi->InsertDocumenti");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling DatiCertificatoApi->InsertDocumenti");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/utenti/documento";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (documenti != null && documenti.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documenti); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documenti; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertDocumenti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Aggiunge i documenti agli utenti Gli utenti disponibili sono quelli del contratto
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="documenti">Documenti</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InsertDocumentiAsync (string id, DocumentiUtentiRequest documenti, string xAuthorization)
        {
             await InsertDocumentiAsyncWithHttpInfo(id, documenti, xAuthorization);

        }

        /// <summary>
        /// Aggiunge i documenti agli utenti Gli utenti disponibili sono quelli del contratto
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificativo contratto</param>
        /// <param name="documenti">Documenti</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InsertDocumentiAsyncWithHttpInfo (string id, DocumentiUtentiRequest documenti, string xAuthorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DatiCertificatoApi->InsertDocumenti");
            // verify the required parameter 'documenti' is set
            if (documenti == null)
                throw new ApiException(400, "Missing required parameter 'documenti' when calling DatiCertificatoApi->InsertDocumenti");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling DatiCertificatoApi->InsertDocumenti");

            var localVarPath = "/api/v1/contratti/{id}/clientefinale/utenti/documento";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (documenti != null && documenti.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documenti); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documenti; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertDocumenti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
