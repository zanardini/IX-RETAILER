/* 
 * Contratti API V2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ClienteRequest
    /// </summary>
    [DataContract]
    public partial class ClienteRequest :  IEquatable<ClienteRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClienteRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClienteRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClienteRequest" /> class.
        /// </summary>
        /// <param name="partitaiva">partitaiva (required).</param>
        /// <param name="ragioneSociale">ragioneSociale (required).</param>
        /// <param name="via">via (required).</param>
        /// <param name="civico">civico (required).</param>
        /// <param name="comune">comune (required).</param>
        /// <param name="codiceFiscale">codiceFiscale.</param>
        /// <param name="emailPec">emailPec (required).</param>
        /// <param name="telefono">telefono (required).</param>
        public ClienteRequest(string partitaiva = default(string), string ragioneSociale = default(string), string via = default(string), string civico = default(string), string comune = default(string), string codiceFiscale = default(string), string emailPec = default(string), string telefono = default(string))
        {
            // to ensure "partitaiva" is required (not null)
            if (partitaiva == null)
            {
                throw new InvalidDataException("partitaiva is a required property for ClienteRequest and cannot be null");
            }
            else
            {
                this.Partitaiva = partitaiva;
            }
            // to ensure "ragioneSociale" is required (not null)
            if (ragioneSociale == null)
            {
                throw new InvalidDataException("ragioneSociale is a required property for ClienteRequest and cannot be null");
            }
            else
            {
                this.RagioneSociale = ragioneSociale;
            }
            // to ensure "via" is required (not null)
            if (via == null)
            {
                throw new InvalidDataException("via is a required property for ClienteRequest and cannot be null");
            }
            else
            {
                this.Via = via;
            }
            // to ensure "civico" is required (not null)
            if (civico == null)
            {
                throw new InvalidDataException("civico is a required property for ClienteRequest and cannot be null");
            }
            else
            {
                this.Civico = civico;
            }
            // to ensure "comune" is required (not null)
            if (comune == null)
            {
                throw new InvalidDataException("comune is a required property for ClienteRequest and cannot be null");
            }
            else
            {
                this.Comune = comune;
            }
            // to ensure "emailPec" is required (not null)
            if (emailPec == null)
            {
                throw new InvalidDataException("emailPec is a required property for ClienteRequest and cannot be null");
            }
            else
            {
                this.EmailPec = emailPec;
            }
            // to ensure "telefono" is required (not null)
            if (telefono == null)
            {
                throw new InvalidDataException("telefono is a required property for ClienteRequest and cannot be null");
            }
            else
            {
                this.Telefono = telefono;
            }
            this.CodiceFiscale = codiceFiscale;
        }
        
        /// <summary>
        /// Gets or Sets Partitaiva
        /// </summary>
        [DataMember(Name="partitaiva", EmitDefaultValue=false)]
        public string Partitaiva { get; set; }

        /// <summary>
        /// Gets or Sets RagioneSociale
        /// </summary>
        [DataMember(Name="ragioneSociale", EmitDefaultValue=false)]
        public string RagioneSociale { get; set; }

        /// <summary>
        /// Gets or Sets Via
        /// </summary>
        [DataMember(Name="via", EmitDefaultValue=false)]
        public string Via { get; set; }

        /// <summary>
        /// Gets or Sets Civico
        /// </summary>
        [DataMember(Name="civico", EmitDefaultValue=false)]
        public string Civico { get; set; }

        /// <summary>
        /// Gets or Sets Comune
        /// </summary>
        [DataMember(Name="comune", EmitDefaultValue=false)]
        public string Comune { get; set; }

        /// <summary>
        /// Gets or Sets CodiceFiscale
        /// </summary>
        [DataMember(Name="codiceFiscale", EmitDefaultValue=false)]
        public string CodiceFiscale { get; set; }

        /// <summary>
        /// Gets or Sets EmailPec
        /// </summary>
        [DataMember(Name="emailPec", EmitDefaultValue=false)]
        public string EmailPec { get; set; }

        /// <summary>
        /// Gets or Sets Telefono
        /// </summary>
        [DataMember(Name="telefono", EmitDefaultValue=false)]
        public string Telefono { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClienteRequest {\n");
            sb.Append("  Partitaiva: ").Append(Partitaiva).Append("\n");
            sb.Append("  RagioneSociale: ").Append(RagioneSociale).Append("\n");
            sb.Append("  Via: ").Append(Via).Append("\n");
            sb.Append("  Civico: ").Append(Civico).Append("\n");
            sb.Append("  Comune: ").Append(Comune).Append("\n");
            sb.Append("  CodiceFiscale: ").Append(CodiceFiscale).Append("\n");
            sb.Append("  EmailPec: ").Append(EmailPec).Append("\n");
            sb.Append("  Telefono: ").Append(Telefono).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClienteRequest);
        }

        /// <summary>
        /// Returns true if ClienteRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ClienteRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClienteRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Partitaiva == input.Partitaiva ||
                    (this.Partitaiva != null &&
                    this.Partitaiva.Equals(input.Partitaiva))
                ) && 
                (
                    this.RagioneSociale == input.RagioneSociale ||
                    (this.RagioneSociale != null &&
                    this.RagioneSociale.Equals(input.RagioneSociale))
                ) && 
                (
                    this.Via == input.Via ||
                    (this.Via != null &&
                    this.Via.Equals(input.Via))
                ) && 
                (
                    this.Civico == input.Civico ||
                    (this.Civico != null &&
                    this.Civico.Equals(input.Civico))
                ) && 
                (
                    this.Comune == input.Comune ||
                    (this.Comune != null &&
                    this.Comune.Equals(input.Comune))
                ) && 
                (
                    this.CodiceFiscale == input.CodiceFiscale ||
                    (this.CodiceFiscale != null &&
                    this.CodiceFiscale.Equals(input.CodiceFiscale))
                ) && 
                (
                    this.EmailPec == input.EmailPec ||
                    (this.EmailPec != null &&
                    this.EmailPec.Equals(input.EmailPec))
                ) && 
                (
                    this.Telefono == input.Telefono ||
                    (this.Telefono != null &&
                    this.Telefono.Equals(input.Telefono))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Partitaiva != null)
                    hashCode = hashCode * 59 + this.Partitaiva.GetHashCode();
                if (this.RagioneSociale != null)
                    hashCode = hashCode * 59 + this.RagioneSociale.GetHashCode();
                if (this.Via != null)
                    hashCode = hashCode * 59 + this.Via.GetHashCode();
                if (this.Civico != null)
                    hashCode = hashCode * 59 + this.Civico.GetHashCode();
                if (this.Comune != null)
                    hashCode = hashCode * 59 + this.Comune.GetHashCode();
                if (this.CodiceFiscale != null)
                    hashCode = hashCode * 59 + this.CodiceFiscale.GetHashCode();
                if (this.EmailPec != null)
                    hashCode = hashCode * 59 + this.EmailPec.GetHashCode();
                if (this.Telefono != null)
                    hashCode = hashCode * 59 + this.Telefono.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Partitaiva (string) maxLength
            if(this.Partitaiva != null && this.Partitaiva.Length > 11)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Partitaiva, length must be less than 11.", new [] { "Partitaiva" });
            }

            // Partitaiva (string) minLength
            if(this.Partitaiva != null && this.Partitaiva.Length < 11)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Partitaiva, length must be greater than 11.", new [] { "Partitaiva" });
            }

            // RagioneSociale (string) maxLength
            if(this.RagioneSociale != null && this.RagioneSociale.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RagioneSociale, length must be less than 255.", new [] { "RagioneSociale" });
            }

            // RagioneSociale (string) minLength
            if(this.RagioneSociale != null && this.RagioneSociale.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RagioneSociale, length must be greater than 0.", new [] { "RagioneSociale" });
            }

            // Via (string) maxLength
            if(this.Via != null && this.Via.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Via, length must be less than 500.", new [] { "Via" });
            }

            // Via (string) minLength
            if(this.Via != null && this.Via.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Via, length must be greater than 0.", new [] { "Via" });
            }

            // Civico (string) maxLength
            if(this.Civico != null && this.Civico.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Civico, length must be less than 20.", new [] { "Civico" });
            }

            // Civico (string) minLength
            if(this.Civico != null && this.Civico.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Civico, length must be greater than 0.", new [] { "Civico" });
            }

            // CodiceFiscale (string) maxLength
            if(this.CodiceFiscale != null && this.CodiceFiscale.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CodiceFiscale, length must be less than 50.", new [] { "CodiceFiscale" });
            }

            // CodiceFiscale (string) minLength
            if(this.CodiceFiscale != null && this.CodiceFiscale.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CodiceFiscale, length must be greater than 0.", new [] { "CodiceFiscale" });
            }

            // EmailPec (string) maxLength
            if(this.EmailPec != null && this.EmailPec.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailPec, length must be less than 255.", new [] { "EmailPec" });
            }

            // EmailPec (string) minLength
            if(this.EmailPec != null && this.EmailPec.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailPec, length must be greater than 0.", new [] { "EmailPec" });
            }

            // Telefono (string) maxLength
            if(this.Telefono != null && this.Telefono.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Telefono, length must be less than 100.", new [] { "Telefono" });
            }

            // Telefono (string) minLength
            if(this.Telefono != null && this.Telefono.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Telefono, length must be greater than 0.", new [] { "Telefono" });
            }

            yield break;
        }
    }

}
