/* 
 * Contratti API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ContrattoInfo
    /// </summary>
    [DataContract]
    public partial class ContrattoInfo :  IEquatable<ContrattoInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines Stato
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatoEnum
        {
            
            /// <summary>
            /// Enum INELABORAZIONE for value: IN_ELABORAZIONE
            /// </summary>
            [EnumMember(Value = "IN_ELABORAZIONE")]
            INELABORAZIONE = 1,
            
            /// <summary>
            /// Enum INERRORE for value: IN_ERRORE
            /// </summary>
            [EnumMember(Value = "IN_ERRORE")]
            INERRORE = 2,
            
            /// <summary>
            /// Enum ATTESARISCONTRO for value: ATTESA_RISCONTRO
            /// </summary>
            [EnumMember(Value = "ATTESA_RISCONTRO")]
            ATTESARISCONTRO = 3,
            
            /// <summary>
            /// Enum CONTROFIRMATO for value: CONTROFIRMATO
            /// </summary>
            [EnumMember(Value = "CONTROFIRMATO")]
            CONTROFIRMATO = 4,
            
            /// <summary>
            /// Enum ANNULLATO for value: ANNULLATO
            /// </summary>
            [EnumMember(Value = "ANNULLATO")]
            ANNULLATO = 5,
            
            /// <summary>
            /// Enum ATTIVATO for value: ATTIVATO
            /// </summary>
            [EnumMember(Value = "ATTIVATO")]
            ATTIVATO = 6,
            
            /// <summary>
            /// Enum RIAPERTO for value: RIAPERTO
            /// </summary>
            [EnumMember(Value = "RIAPERTO")]
            RIAPERTO = 7
        }

        /// <summary>
        /// Gets or Sets Stato
        /// </summary>
        [DataMember(Name="stato", EmitDefaultValue=false)]
        public StatoEnum Stato { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContrattoInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContrattoInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContrattoInfo" /> class.
        /// </summary>
        /// <param name="identificativo">identificativo (required).</param>
        /// <param name="tipo">tipo (required).</param>
        /// <param name="descrizione">descrizione (required).</param>
        /// <param name="externalId">externalId.</param>
        /// <param name="dataCreazione">dataCreazione (required).</param>
        /// <param name="dataUltimaModifica">dataUltimaModifica (required).</param>
        /// <param name="stato">stato (required).</param>
        /// <param name="rivenditore">rivenditore (required).</param>
        /// <param name="distributore">distributore (required).</param>
        public ContrattoInfo(string identificativo = default(string), string tipo = default(string), string descrizione = default(string), string externalId = default(string), DateTime? dataCreazione = default(DateTime?), DateTime? dataUltimaModifica = default(DateTime?), StatoEnum stato = default(StatoEnum), RivenditoreResponse rivenditore = default(RivenditoreResponse), DistributoreResponse distributore = default(DistributoreResponse))
        {
            // to ensure "identificativo" is required (not null)
            if (identificativo == null)
            {
                throw new InvalidDataException("identificativo is a required property for ContrattoInfo and cannot be null");
            }
            else
            {
                this.Identificativo = identificativo;
            }
            // to ensure "tipo" is required (not null)
            if (tipo == null)
            {
                throw new InvalidDataException("tipo is a required property for ContrattoInfo and cannot be null");
            }
            else
            {
                this.Tipo = tipo;
            }
            // to ensure "descrizione" is required (not null)
            if (descrizione == null)
            {
                throw new InvalidDataException("descrizione is a required property for ContrattoInfo and cannot be null");
            }
            else
            {
                this.Descrizione = descrizione;
            }
            // to ensure "dataCreazione" is required (not null)
            if (dataCreazione == null)
            {
                throw new InvalidDataException("dataCreazione is a required property for ContrattoInfo and cannot be null");
            }
            else
            {
                this.DataCreazione = dataCreazione;
            }
            // to ensure "dataUltimaModifica" is required (not null)
            if (dataUltimaModifica == null)
            {
                throw new InvalidDataException("dataUltimaModifica is a required property for ContrattoInfo and cannot be null");
            }
            else
            {
                this.DataUltimaModifica = dataUltimaModifica;
            }
            // to ensure "stato" is required (not null)
            if (stato == null)
            {
                throw new InvalidDataException("stato is a required property for ContrattoInfo and cannot be null");
            }
            else
            {
                this.Stato = stato;
            }
            // to ensure "rivenditore" is required (not null)
            if (rivenditore == null)
            {
                throw new InvalidDataException("rivenditore is a required property for ContrattoInfo and cannot be null");
            }
            else
            {
                this.Rivenditore = rivenditore;
            }
            // to ensure "distributore" is required (not null)
            if (distributore == null)
            {
                throw new InvalidDataException("distributore is a required property for ContrattoInfo and cannot be null");
            }
            else
            {
                this.Distributore = distributore;
            }
            this.ExternalId = externalId;
        }
        
        /// <summary>
        /// Gets or Sets Identificativo
        /// </summary>
        [DataMember(Name="identificativo", EmitDefaultValue=false)]
        public string Identificativo { get; set; }

        /// <summary>
        /// Gets or Sets Tipo
        /// </summary>
        [DataMember(Name="tipo", EmitDefaultValue=false)]
        public string Tipo { get; set; }

        /// <summary>
        /// Gets or Sets Descrizione
        /// </summary>
        [DataMember(Name="descrizione", EmitDefaultValue=false)]
        public string Descrizione { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets DataCreazione
        /// </summary>
        [DataMember(Name="dataCreazione", EmitDefaultValue=false)]
        public DateTime? DataCreazione { get; set; }

        /// <summary>
        /// Gets or Sets DataUltimaModifica
        /// </summary>
        [DataMember(Name="dataUltimaModifica", EmitDefaultValue=false)]
        public DateTime? DataUltimaModifica { get; set; }


        /// <summary>
        /// Gets or Sets Rivenditore
        /// </summary>
        [DataMember(Name="rivenditore", EmitDefaultValue=false)]
        public RivenditoreResponse Rivenditore { get; set; }

        /// <summary>
        /// Gets or Sets Distributore
        /// </summary>
        [DataMember(Name="distributore", EmitDefaultValue=false)]
        public DistributoreResponse Distributore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContrattoInfo {\n");
            sb.Append("  Identificativo: ").Append(Identificativo).Append("\n");
            sb.Append("  Tipo: ").Append(Tipo).Append("\n");
            sb.Append("  Descrizione: ").Append(Descrizione).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  DataCreazione: ").Append(DataCreazione).Append("\n");
            sb.Append("  DataUltimaModifica: ").Append(DataUltimaModifica).Append("\n");
            sb.Append("  Stato: ").Append(Stato).Append("\n");
            sb.Append("  Rivenditore: ").Append(Rivenditore).Append("\n");
            sb.Append("  Distributore: ").Append(Distributore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContrattoInfo);
        }

        /// <summary>
        /// Returns true if ContrattoInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ContrattoInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContrattoInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identificativo == input.Identificativo ||
                    (this.Identificativo != null &&
                    this.Identificativo.Equals(input.Identificativo))
                ) && 
                (
                    this.Tipo == input.Tipo ||
                    (this.Tipo != null &&
                    this.Tipo.Equals(input.Tipo))
                ) && 
                (
                    this.Descrizione == input.Descrizione ||
                    (this.Descrizione != null &&
                    this.Descrizione.Equals(input.Descrizione))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.DataCreazione == input.DataCreazione ||
                    (this.DataCreazione != null &&
                    this.DataCreazione.Equals(input.DataCreazione))
                ) && 
                (
                    this.DataUltimaModifica == input.DataUltimaModifica ||
                    (this.DataUltimaModifica != null &&
                    this.DataUltimaModifica.Equals(input.DataUltimaModifica))
                ) && 
                (
                    this.Stato == input.Stato ||
                    (this.Stato != null &&
                    this.Stato.Equals(input.Stato))
                ) && 
                (
                    this.Rivenditore == input.Rivenditore ||
                    (this.Rivenditore != null &&
                    this.Rivenditore.Equals(input.Rivenditore))
                ) && 
                (
                    this.Distributore == input.Distributore ||
                    (this.Distributore != null &&
                    this.Distributore.Equals(input.Distributore))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identificativo != null)
                    hashCode = hashCode * 59 + this.Identificativo.GetHashCode();
                if (this.Tipo != null)
                    hashCode = hashCode * 59 + this.Tipo.GetHashCode();
                if (this.Descrizione != null)
                    hashCode = hashCode * 59 + this.Descrizione.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.DataCreazione != null)
                    hashCode = hashCode * 59 + this.DataCreazione.GetHashCode();
                if (this.DataUltimaModifica != null)
                    hashCode = hashCode * 59 + this.DataUltimaModifica.GetHashCode();
                if (this.Stato != null)
                    hashCode = hashCode * 59 + this.Stato.GetHashCode();
                if (this.Rivenditore != null)
                    hashCode = hashCode * 59 + this.Rivenditore.GetHashCode();
                if (this.Distributore != null)
                    hashCode = hashCode * 59 + this.Distributore.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
