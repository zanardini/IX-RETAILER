/* 
 * Contratti API V2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ContrattoResponse
    /// </summary>
    [DataContract]
    public partial class ContrattoResponse :  IEquatable<ContrattoResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContrattoResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContrattoResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContrattoResponse" /> class.
        /// </summary>
        /// <param name="identificativo">identificativo (required).</param>
        /// <param name="tipo">tipo (required).</param>
        /// <param name="moduli">moduli.</param>
        /// <param name="fasciaIx">fasciaIx.</param>
        /// <param name="fasciaIxCe">fasciaIxCe.</param>
        /// <param name="fasciaIxPec">fasciaIxPec.</param>
        /// <param name="responsabileConservazione">responsabileConservazione.</param>
        /// <param name="descrizione">descrizione (required).</param>
        /// <param name="externalId">externalId.</param>
        /// <param name="rivenditore">rivenditore (required).</param>
        /// <param name="distributore">distributore (required).</param>
        /// <param name="passo">passo.</param>
        public ContrattoResponse(string identificativo = default(string), string tipo = default(string), List<ContrattoModulo> moduli = default(List<ContrattoModulo>), FasciaIxResponse fasciaIx = default(FasciaIxResponse), FasciaIxCeInfo fasciaIxCe = default(FasciaIxCeInfo), FasciaIxPecInfo fasciaIxPec = default(FasciaIxPecInfo), ResponsabileConservazioneInfo responsabileConservazione = default(ResponsabileConservazioneInfo), string descrizione = default(string), string externalId = default(string), RivenditoreResponse rivenditore = default(RivenditoreResponse), DistributoreResponse distributore = default(DistributoreResponse), string passo = default(string))
        {
            // to ensure "identificativo" is required (not null)
            if (identificativo == null)
            {
                throw new InvalidDataException("identificativo is a required property for ContrattoResponse and cannot be null");
            }
            else
            {
                this.Identificativo = identificativo;
            }
            // to ensure "tipo" is required (not null)
            if (tipo == null)
            {
                throw new InvalidDataException("tipo is a required property for ContrattoResponse and cannot be null");
            }
            else
            {
                this.Tipo = tipo;
            }
            // to ensure "descrizione" is required (not null)
            if (descrizione == null)
            {
                throw new InvalidDataException("descrizione is a required property for ContrattoResponse and cannot be null");
            }
            else
            {
                this.Descrizione = descrizione;
            }
            // to ensure "rivenditore" is required (not null)
            if (rivenditore == null)
            {
                throw new InvalidDataException("rivenditore is a required property for ContrattoResponse and cannot be null");
            }
            else
            {
                this.Rivenditore = rivenditore;
            }
            // to ensure "distributore" is required (not null)
            if (distributore == null)
            {
                throw new InvalidDataException("distributore is a required property for ContrattoResponse and cannot be null");
            }
            else
            {
                this.Distributore = distributore;
            }
            this.Moduli = moduli;
            this.FasciaIx = fasciaIx;
            this.FasciaIxCe = fasciaIxCe;
            this.FasciaIxPec = fasciaIxPec;
            this.ResponsabileConservazione = responsabileConservazione;
            this.ExternalId = externalId;
            this.Passo = passo;
        }
        
        /// <summary>
        /// Gets or Sets Identificativo
        /// </summary>
        [DataMember(Name="identificativo", EmitDefaultValue=false)]
        public string Identificativo { get; set; }

        /// <summary>
        /// Gets or Sets Tipo
        /// </summary>
        [DataMember(Name="tipo", EmitDefaultValue=false)]
        public string Tipo { get; set; }

        /// <summary>
        /// Gets or Sets Moduli
        /// </summary>
        [DataMember(Name="moduli", EmitDefaultValue=false)]
        public List<ContrattoModulo> Moduli { get; set; }

        /// <summary>
        /// Gets or Sets FasciaIx
        /// </summary>
        [DataMember(Name="fasciaIx", EmitDefaultValue=false)]
        public FasciaIxResponse FasciaIx { get; set; }

        /// <summary>
        /// Gets or Sets FasciaIxCe
        /// </summary>
        [DataMember(Name="fasciaIxCe", EmitDefaultValue=false)]
        public FasciaIxCeInfo FasciaIxCe { get; set; }

        /// <summary>
        /// Gets or Sets FasciaIxPec
        /// </summary>
        [DataMember(Name="fasciaIxPec", EmitDefaultValue=false)]
        public FasciaIxPecInfo FasciaIxPec { get; set; }

        /// <summary>
        /// Gets or Sets ResponsabileConservazione
        /// </summary>
        [DataMember(Name="responsabileConservazione", EmitDefaultValue=false)]
        public ResponsabileConservazioneInfo ResponsabileConservazione { get; set; }

        /// <summary>
        /// Gets or Sets Descrizione
        /// </summary>
        [DataMember(Name="descrizione", EmitDefaultValue=false)]
        public string Descrizione { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets Rivenditore
        /// </summary>
        [DataMember(Name="rivenditore", EmitDefaultValue=false)]
        public RivenditoreResponse Rivenditore { get; set; }

        /// <summary>
        /// Gets or Sets Distributore
        /// </summary>
        [DataMember(Name="distributore", EmitDefaultValue=false)]
        public DistributoreResponse Distributore { get; set; }

        /// <summary>
        /// Gets or Sets Passo
        /// </summary>
        [DataMember(Name="passo", EmitDefaultValue=false)]
        public string Passo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContrattoResponse {\n");
            sb.Append("  Identificativo: ").Append(Identificativo).Append("\n");
            sb.Append("  Tipo: ").Append(Tipo).Append("\n");
            sb.Append("  Moduli: ").Append(Moduli).Append("\n");
            sb.Append("  FasciaIx: ").Append(FasciaIx).Append("\n");
            sb.Append("  FasciaIxCe: ").Append(FasciaIxCe).Append("\n");
            sb.Append("  FasciaIxPec: ").Append(FasciaIxPec).Append("\n");
            sb.Append("  ResponsabileConservazione: ").Append(ResponsabileConservazione).Append("\n");
            sb.Append("  Descrizione: ").Append(Descrizione).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Rivenditore: ").Append(Rivenditore).Append("\n");
            sb.Append("  Distributore: ").Append(Distributore).Append("\n");
            sb.Append("  Passo: ").Append(Passo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContrattoResponse);
        }

        /// <summary>
        /// Returns true if ContrattoResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ContrattoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContrattoResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identificativo == input.Identificativo ||
                    (this.Identificativo != null &&
                    this.Identificativo.Equals(input.Identificativo))
                ) && 
                (
                    this.Tipo == input.Tipo ||
                    (this.Tipo != null &&
                    this.Tipo.Equals(input.Tipo))
                ) && 
                (
                    this.Moduli == input.Moduli ||
                    this.Moduli != null &&
                    this.Moduli.SequenceEqual(input.Moduli)
                ) && 
                (
                    this.FasciaIx == input.FasciaIx ||
                    (this.FasciaIx != null &&
                    this.FasciaIx.Equals(input.FasciaIx))
                ) && 
                (
                    this.FasciaIxCe == input.FasciaIxCe ||
                    (this.FasciaIxCe != null &&
                    this.FasciaIxCe.Equals(input.FasciaIxCe))
                ) && 
                (
                    this.FasciaIxPec == input.FasciaIxPec ||
                    (this.FasciaIxPec != null &&
                    this.FasciaIxPec.Equals(input.FasciaIxPec))
                ) && 
                (
                    this.ResponsabileConservazione == input.ResponsabileConservazione ||
                    (this.ResponsabileConservazione != null &&
                    this.ResponsabileConservazione.Equals(input.ResponsabileConservazione))
                ) && 
                (
                    this.Descrizione == input.Descrizione ||
                    (this.Descrizione != null &&
                    this.Descrizione.Equals(input.Descrizione))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.Rivenditore == input.Rivenditore ||
                    (this.Rivenditore != null &&
                    this.Rivenditore.Equals(input.Rivenditore))
                ) && 
                (
                    this.Distributore == input.Distributore ||
                    (this.Distributore != null &&
                    this.Distributore.Equals(input.Distributore))
                ) && 
                (
                    this.Passo == input.Passo ||
                    (this.Passo != null &&
                    this.Passo.Equals(input.Passo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identificativo != null)
                    hashCode = hashCode * 59 + this.Identificativo.GetHashCode();
                if (this.Tipo != null)
                    hashCode = hashCode * 59 + this.Tipo.GetHashCode();
                if (this.Moduli != null)
                    hashCode = hashCode * 59 + this.Moduli.GetHashCode();
                if (this.FasciaIx != null)
                    hashCode = hashCode * 59 + this.FasciaIx.GetHashCode();
                if (this.FasciaIxCe != null)
                    hashCode = hashCode * 59 + this.FasciaIxCe.GetHashCode();
                if (this.FasciaIxPec != null)
                    hashCode = hashCode * 59 + this.FasciaIxPec.GetHashCode();
                if (this.ResponsabileConservazione != null)
                    hashCode = hashCode * 59 + this.ResponsabileConservazione.GetHashCode();
                if (this.Descrizione != null)
                    hashCode = hashCode * 59 + this.Descrizione.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.Rivenditore != null)
                    hashCode = hashCode * 59 + this.Rivenditore.GetHashCode();
                if (this.Distributore != null)
                    hashCode = hashCode * 59 + this.Distributore.GetHashCode();
                if (this.Passo != null)
                    hashCode = hashCode * 59 + this.Passo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
