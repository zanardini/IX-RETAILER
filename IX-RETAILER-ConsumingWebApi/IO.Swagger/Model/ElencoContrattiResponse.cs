/* 
 * Contratti API V2.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ElencoContrattiResponse
    /// </summary>
    [DataContract]
    public partial class ElencoContrattiResponse :  IEquatable<ElencoContrattiResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ElencoContrattiResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ElencoContrattiResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ElencoContrattiResponse" /> class.
        /// </summary>
        /// <param name="contratti">contratti (required).</param>
        /// <param name="resultCount">resultCount (required).</param>
        public ElencoContrattiResponse(List<ContrattoInfo> contratti = default(List<ContrattoInfo>), ListResultCount resultCount = default(ListResultCount))
        {
            // to ensure "contratti" is required (not null)
            if (contratti == null)
            {
                throw new InvalidDataException("contratti is a required property for ElencoContrattiResponse and cannot be null");
            }
            else
            {
                this.Contratti = contratti;
            }
            // to ensure "resultCount" is required (not null)
            if (resultCount == null)
            {
                throw new InvalidDataException("resultCount is a required property for ElencoContrattiResponse and cannot be null");
            }
            else
            {
                this.ResultCount = resultCount;
            }
        }
        
        /// <summary>
        /// Gets or Sets Contratti
        /// </summary>
        [DataMember(Name="contratti", EmitDefaultValue=false)]
        public List<ContrattoInfo> Contratti { get; set; }

        /// <summary>
        /// Gets or Sets ResultCount
        /// </summary>
        [DataMember(Name="resultCount", EmitDefaultValue=false)]
        public ListResultCount ResultCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ElencoContrattiResponse {\n");
            sb.Append("  Contratti: ").Append(Contratti).Append("\n");
            sb.Append("  ResultCount: ").Append(ResultCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ElencoContrattiResponse);
        }

        /// <summary>
        /// Returns true if ElencoContrattiResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ElencoContrattiResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElencoContrattiResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Contratti == input.Contratti ||
                    this.Contratti != null &&
                    this.Contratti.SequenceEqual(input.Contratti)
                ) && 
                (
                    this.ResultCount == input.ResultCount ||
                    (this.ResultCount != null &&
                    this.ResultCount.Equals(input.ResultCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Contratti != null)
                    hashCode = hashCode * 59 + this.Contratti.GetHashCode();
                if (this.ResultCount != null)
                    hashCode = hashCode * 59 + this.ResultCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
