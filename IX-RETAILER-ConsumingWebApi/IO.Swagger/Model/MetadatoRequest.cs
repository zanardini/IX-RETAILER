/* 
 * Contratti API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MetadatoRequest
    /// </summary>
    [DataContract]
    public partial class MetadatoRequest :  IEquatable<MetadatoRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines TipoCampo
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TipoCampoEnum
        {
            
            /// <summary>
            /// Enum STRINGA for value: STRINGA
            /// </summary>
            [EnumMember(Value = "STRINGA")]
            STRINGA = 1,
            
            /// <summary>
            /// Enum INTERO for value: INTERO
            /// </summary>
            [EnumMember(Value = "INTERO")]
            INTERO = 2,
            
            /// <summary>
            /// Enum DATE for value: DATE
            /// </summary>
            [EnumMember(Value = "DATE")]
            DATE = 3,
            
            /// <summary>
            /// Enum DATETIMEUTC for value: DATE_TIME_UTC
            /// </summary>
            [EnumMember(Value = "DATE_TIME_UTC")]
            DATETIMEUTC = 4,
            
            /// <summary>
            /// Enum DOUBLE for value: DOUBLE
            /// </summary>
            [EnumMember(Value = "DOUBLE")]
            DOUBLE = 5,
            
            /// <summary>
            /// Enum BOOLEAN for value: BOOLEAN
            /// </summary>
            [EnumMember(Value = "BOOLEAN")]
            BOOLEAN = 6
        }

        /// <summary>
        /// Gets or Sets TipoCampo
        /// </summary>
        [DataMember(Name="tipoCampo", EmitDefaultValue=false)]
        public TipoCampoEnum TipoCampo { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadatoRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MetadatoRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadatoRequest" /> class.
        /// </summary>
        /// <param name="codiceCampo">codiceCampo (required).</param>
        /// <param name="descrizioneCampo">descrizioneCampo (required).</param>
        /// <param name="obbligatorio">obbligatorio (required).</param>
        /// <param name="tipoCampo">tipoCampo (required).</param>
        public MetadatoRequest(string codiceCampo = default(string), string descrizioneCampo = default(string), bool? obbligatorio = default(bool?), TipoCampoEnum tipoCampo = default(TipoCampoEnum))
        {
            // to ensure "codiceCampo" is required (not null)
            if (codiceCampo == null)
            {
                throw new InvalidDataException("codiceCampo is a required property for MetadatoRequest and cannot be null");
            }
            else
            {
                this.CodiceCampo = codiceCampo;
            }
            // to ensure "descrizioneCampo" is required (not null)
            if (descrizioneCampo == null)
            {
                throw new InvalidDataException("descrizioneCampo is a required property for MetadatoRequest and cannot be null");
            }
            else
            {
                this.DescrizioneCampo = descrizioneCampo;
            }
            // to ensure "obbligatorio" is required (not null)
            if (obbligatorio == null)
            {
                throw new InvalidDataException("obbligatorio is a required property for MetadatoRequest and cannot be null");
            }
            else
            {
                this.Obbligatorio = obbligatorio;
            }
            // to ensure "tipoCampo" is required (not null)
            if (tipoCampo == null)
            {
                throw new InvalidDataException("tipoCampo is a required property for MetadatoRequest and cannot be null");
            }
            else
            {
                this.TipoCampo = tipoCampo;
            }
        }
        
        /// <summary>
        /// Gets or Sets CodiceCampo
        /// </summary>
        [DataMember(Name="codiceCampo", EmitDefaultValue=false)]
        public string CodiceCampo { get; set; }

        /// <summary>
        /// Gets or Sets DescrizioneCampo
        /// </summary>
        [DataMember(Name="descrizioneCampo", EmitDefaultValue=false)]
        public string DescrizioneCampo { get; set; }

        /// <summary>
        /// Gets or Sets Obbligatorio
        /// </summary>
        [DataMember(Name="obbligatorio", EmitDefaultValue=false)]
        public bool? Obbligatorio { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetadatoRequest {\n");
            sb.Append("  CodiceCampo: ").Append(CodiceCampo).Append("\n");
            sb.Append("  DescrizioneCampo: ").Append(DescrizioneCampo).Append("\n");
            sb.Append("  Obbligatorio: ").Append(Obbligatorio).Append("\n");
            sb.Append("  TipoCampo: ").Append(TipoCampo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetadatoRequest);
        }

        /// <summary>
        /// Returns true if MetadatoRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MetadatoRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetadatoRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CodiceCampo == input.CodiceCampo ||
                    (this.CodiceCampo != null &&
                    this.CodiceCampo.Equals(input.CodiceCampo))
                ) && 
                (
                    this.DescrizioneCampo == input.DescrizioneCampo ||
                    (this.DescrizioneCampo != null &&
                    this.DescrizioneCampo.Equals(input.DescrizioneCampo))
                ) && 
                (
                    this.Obbligatorio == input.Obbligatorio ||
                    (this.Obbligatorio != null &&
                    this.Obbligatorio.Equals(input.Obbligatorio))
                ) && 
                (
                    this.TipoCampo == input.TipoCampo ||
                    (this.TipoCampo != null &&
                    this.TipoCampo.Equals(input.TipoCampo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CodiceCampo != null)
                    hashCode = hashCode * 59 + this.CodiceCampo.GetHashCode();
                if (this.DescrizioneCampo != null)
                    hashCode = hashCode * 59 + this.DescrizioneCampo.GetHashCode();
                if (this.Obbligatorio != null)
                    hashCode = hashCode * 59 + this.Obbligatorio.GetHashCode();
                if (this.TipoCampo != null)
                    hashCode = hashCode * 59 + this.TipoCampo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
