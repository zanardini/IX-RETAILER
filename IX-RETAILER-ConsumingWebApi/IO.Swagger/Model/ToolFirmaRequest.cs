/* 
 * Contratti API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ToolFirmaRequest
    /// </summary>
    [DataContract]
    public partial class ToolFirmaRequest :  IEquatable<ToolFirmaRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines ToolFirma
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ToolFirmaEnum
        {
            
            /// <summary>
            /// Enum IX for value: IX
            /// </summary>
            [EnumMember(Value = "IX")]
            IX = 1,
            
            /// <summary>
            /// Enum IXCE for value: IXCE
            /// </summary>
            [EnumMember(Value = "IXCE")]
            IXCE = 2,
            
            /// <summary>
            /// Enum ARXIVAR for value: ARXIVAR
            /// </summary>
            [EnumMember(Value = "ARXIVAR")]
            ARXIVAR = 3,
            
            /// <summary>
            /// Enum ALTRO for value: ALTRO
            /// </summary>
            [EnumMember(Value = "ALTRO")]
            ALTRO = 4
        }

        /// <summary>
        /// Gets or Sets ToolFirma
        /// </summary>
        [DataMember(Name="toolFirma", EmitDefaultValue=false)]
        public ToolFirmaEnum ToolFirma { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolFirmaRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolFirmaRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolFirmaRequest" /> class.
        /// </summary>
        /// <param name="toolFirma">toolFirma (required).</param>
        public ToolFirmaRequest(ToolFirmaEnum toolFirma = default(ToolFirmaEnum))
        {
            // to ensure "toolFirma" is required (not null)
            if (toolFirma == null)
            {
                throw new InvalidDataException("toolFirma is a required property for ToolFirmaRequest and cannot be null");
            }
            else
            {
                this.ToolFirma = toolFirma;
            }
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ToolFirmaRequest {\n");
            sb.Append("  ToolFirma: ").Append(ToolFirma).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ToolFirmaRequest);
        }

        /// <summary>
        /// Returns true if ToolFirmaRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ToolFirmaRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ToolFirmaRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ToolFirma == input.ToolFirma ||
                    (this.ToolFirma != null &&
                    this.ToolFirma.Equals(input.ToolFirma))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ToolFirma != null)
                    hashCode = hashCode * 59 + this.ToolFirma.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
